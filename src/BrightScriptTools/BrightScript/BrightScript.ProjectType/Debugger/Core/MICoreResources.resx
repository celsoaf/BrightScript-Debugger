<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Error_BadRequiredAttribute" xml:space="preserve">
    <value>Required attribute '{0}' is missing or has an invalid value.</value>
  </data>
  <data name="Error_CannotSpecifyBoth" xml:space="preserve">
    <value>Both '{0}' and '{1}' cannot be specified at the same time.</value>
  </data>
  <data name="Error_CorruptingException" xml:space="preserve">
    <value>Internal error in MIEngine. Exception of type '{0}' was thrown.
{1}</value>
  </data>
  <data name="Error_DebuggerInitializeFailed_NoStdErr" xml:space="preserve">
    <value>Unable to establish a connection to {0}. Debug output may contain more information.</value>
  </data>
  <data name="Error_DebuggerInitializeFailed_StdErr" xml:space="preserve">
    <value>Unable to establish a connection to {0}. The following message was written to stderr:
{1}</value>
  </data>
  <data name="Error_DebugServerInitializationFailed" xml:space="preserve">
    <value>Debug server process failed to initialize.</value>
  </data>
  <data name="Error_ExceptionInOperation" xml:space="preserve">
    <value>Exception while processing MIEngine operation. {0}. If the problem continues restart debugging.</value>
  </data>
  <data name="Error_ExceptionProcessingModules" xml:space="preserve">
    <value>An error occurred while processing modules from the target process.
Modules: {0}
Error: {1}</value>
  </data>
  <data name="Error_ExpectedCommandBody" xml:space="preserve">
    <value>Command elements must have a body (ex: &lt;Command&gt;gdb_command_here&lt;/Command&gt;).</value>
  </data>
  <data name="Error_FailedToEnterBreakState" xml:space="preserve">
    <value>Error while trying to enter break state. Debugging will now stop. {0}</value>
  </data>
  <data name="Error_InvalidLaunchOptions" xml:space="preserve">
    <value>Launch options string provided by the project system is invalid. {0}</value>
  </data>
  <data name="Error_InvalidLocalCoreDumpPath" xml:space="preserve">
    <value>Invalid path to core dump file '{0}'. File must be a valid file name that exists on the computer.</value>
  </data>
  <data name="Error_InvalidLocalExePath" xml:space="preserve">
    <value>Invalid path to executable file path '{0}'. File must be a valid file name that exists.</value>
  </data>
  <data name="Error_InvalidMiDebuggerPath" xml:space="preserve">
    <value>The value of miDebuggerPath is invalid</value>
  </data>
  <data name="Error_LauncherNotFound" xml:space="preserve">
    <value>Device App Launcher {0} could not be found.</value>
  </data>
  <data name="Error_MIDebuggerExited_UnknownCode" xml:space="preserve">
    <value>{0} exited unexpectedly. Debugging will now abort.</value>
    <comment>{0} is the name of the debugger</comment>
  </data>
  <data name="Error_MIDebuggerExited_WithCode" xml:space="preserve">
    <value>{0} exited unexpectedly with exit code {1}. Debugging will now abort.</value>
    <comment>{0} is the name of the debugger</comment>
  </data>
  <data name="Error_MissingAttribute" xml:space="preserve">
    <value>Required attribute '{0}' is missing.</value>
  </data>
  <data name="Error_NoMIDebuggerProcess" xml:space="preserve">
    <value>Unable to execute command. The MIEngine is not currently debugging any process.</value>
  </data>
  <data name="Error_NoTerminalAvailable_Linux" xml:space="preserve">
    <value>No terminal is available to launch the debugger.  Please install Gnome Terminal or XTerm.</value>
  </data>
  <data name="Error_ProcessMustBeStopped" xml:space="preserve">
    <value>Commands are only accepted when the process is stopped.</value>
  </data>
  <data name="Error_PropertyCannotBeModifiedAfterInitialization" xml:space="preserve">
    <value>Property '{0}' cannot be modified after initialization is complete.</value>
  </data>
  <data name="Error_ResultFormat" xml:space="preserve">
    <value>Unrecognized format of field "{0}" in result: {1}</value>
  </data>
  <data name="Error_StringIsNullOrEmpty" xml:space="preserve">
    <value>This string is null or empty.</value>
  </data>
  <data name="Error_UnableToLoadSerializer" xml:space="preserve">
    <value>Internal error. Failed to load serializer for type '{0}'.</value>
  </data>
  <data name="Error_UnableToStartDebugging" xml:space="preserve">
    <value>Unable to start debugging. {0}</value>
  </data>
  <data name="Error_UnexpectedMIOutput" xml:space="preserve">
    <value>Unexpected {0} output from command "{1}".</value>
    <comment>{0} is the name of the debugger</comment>
  </data>
  <data name="Error_UnknownTargetArchitecture" xml:space="preserve">
    <value>Unknown or unsupported target architecture '{0}'.</value>
  </data>
  <data name="Error_UnknownXmlElement" xml:space="preserve">
    <value>Unrecognized XML element '{0}'.</value>
  </data>
  <data name="Status_BreakpointPending" xml:space="preserve">
    <value>Module containing this breakpoint has not yet loaded or the breakpoint address could not be obtained.</value>
  </data>
</root>