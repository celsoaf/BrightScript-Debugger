// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.0.0.0
// Machine:  OSTLT0248323
// DateTime: 21/06/2016 16:02:45
// UserName: CFE05
// Input file <SpecFiles\Debugger.y - 21/06/2016 16:02:26>

// options: babel lines diagnose & report gplex

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using BrightScriptTools.Gppg.GPGen;
using System.Collections;
using BrightScriptTools.GPlex;
using BrightScriptTools.GPlex.Parser;

namespace BrightScriptDebug.Compiler
{
public enum Tokens {error=2,EOF=3,dot=4,colon=5,star=6,
    gt=7,comma=8,slash=9,lPar=10,rPar=11,lBrace=12,
    rBrace=13,Eol=14,equal=15,minus=16,print=17,dgStop=18,
    dgFunction=19,dgBS=20,dgDebugger=21,dgLocal=22,dgVariables=23,dgFile=24,
    dgLine=25,dgBacktrace=26,dgCurrent=27,dgCompiling=28,dgRunning=29,dgDev=30,
    dgMain=31,dgMinus=32,dgDebug=33,dgNumber=34,dgIdent=35,dgStr=36,
    maxParseToken=37,EOL=38,comment=39,errTok=40,repErr=41};

// Abstract base class for GPLEX scanners
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.0.0.0")]
public abstract class ScanBase : AbstractScanner<int,LexSpan> {
  private LexSpan __yylloc = new LexSpan();
  public override LexSpan yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }

  protected abstract int CurrentSc { get; set; }
  //
  // Override the virtual EolState property if the scanner state is more
  // complicated then a simple copy of the current start state ordinal
  //
  public virtual int EolState { get { return CurrentSc; } set { CurrentSc = value; } }
}

// Interface class for 'colorizing' scanners
public interface IColorScan {
  void SetSource(string source, int offset);
  int GetNext(ref int state, out int start, out int end);
}

// Utility class for encapsulating token information
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.0.0.0")]
public class ScanObj {
  public int token;
  public int yylval;
  public LexSpan yylloc;
  public ScanObj( int t, int val, LexSpan loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.0.0.0")]
public partial class Parser: ShiftReduceParser<int, LexSpan>
{
#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[21];
  private static State[] states = new State[39];
  private static string[] nonTerms = new string[] {
      "Program", "$accept", "DebugElements", "EolOpt", "DebugElement", "CompileStatment", 
      "RunStatment", "CurrentFunctionStatement", "BacktraceStatment", "LocalVariablesStatment", 
      "InputStatment", "ErrorStatment", };

  static Parser() {
    states[0] = new State(new int[]{14,8,32,-20,27,-20,26,-20,22,-20,20,-20,36,-20,3,-20},new int[]{-1,1,-3,3,-4,5});
    states[1] = new State(new int[]{3,2});
    states[2] = new State(-1);
    states[3] = new State(new int[]{3,4});
    states[4] = new State(-2);
    states[5] = new State(new int[]{32,11,27,23,26,27,22,30,20,34,36,38,3,-4},new int[]{-5,6,-6,10,-7,21,-8,22,-9,26,-10,29,-11,33,-12,37});
    states[6] = new State(new int[]{14,8,32,-20,27,-20,26,-20,22,-20,20,-20,36,-20,3,-20},new int[]{-3,7,-4,5});
    states[7] = new State(-3);
    states[8] = new State(new int[]{14,8,32,-20,27,-20,26,-20,22,-20,20,-20,36,-20,3,-20},new int[]{-4,9});
    states[9] = new State(-19);
    states[10] = new State(-5);
    states[11] = new State(new int[]{28,12,29,16});
    states[12] = new State(new int[]{30,13});
    states[13] = new State(new int[]{36,14});
    states[14] = new State(new int[]{32,15});
    states[15] = new State(-12);
    states[16] = new State(new int[]{30,17});
    states[17] = new State(new int[]{36,18});
    states[18] = new State(new int[]{31,19});
    states[19] = new State(new int[]{32,20});
    states[20] = new State(-13);
    states[21] = new State(-6);
    states[22] = new State(-7);
    states[23] = new State(new int[]{19,24});
    states[24] = new State(new int[]{5,25});
    states[25] = new State(-14);
    states[26] = new State(-8);
    states[27] = new State(new int[]{5,28});
    states[28] = new State(-15);
    states[29] = new State(-9);
    states[30] = new State(new int[]{23,31});
    states[31] = new State(new int[]{5,32});
    states[32] = new State(-16);
    states[33] = new State(-10);
    states[34] = new State(new int[]{21,35});
    states[35] = new State(new int[]{7,36});
    states[36] = new State(-17);
    states[37] = new State(-11);
    states[38] = new State(-18);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-2, new int[]{-1,3});
    rules[2] = new Rule(-1, new int[]{-3,3});
    rules[3] = new Rule(-3, new int[]{-4,-5,-3});
    rules[4] = new Rule(-3, new int[]{-4});
    rules[5] = new Rule(-5, new int[]{-6});
    rules[6] = new Rule(-5, new int[]{-7});
    rules[7] = new Rule(-5, new int[]{-8});
    rules[8] = new Rule(-5, new int[]{-9});
    rules[9] = new Rule(-5, new int[]{-10});
    rules[10] = new Rule(-5, new int[]{-11});
    rules[11] = new Rule(-5, new int[]{-12});
    rules[12] = new Rule(-6, new int[]{32,28,30,36,32});
    rules[13] = new Rule(-7, new int[]{32,29,30,36,31,32});
    rules[14] = new Rule(-8, new int[]{27,19,5});
    rules[15] = new Rule(-9, new int[]{26,5});
    rules[16] = new Rule(-10, new int[]{22,23,5});
    rules[17] = new Rule(-11, new int[]{20,21,7});
    rules[18] = new Rule(-12, new int[]{36});
    rules[19] = new Rule(-4, new int[]{14,-4});
    rules[20] = new Rule(-4, new int[]{});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

#line 81 "SpecFiles\Debugger.y"
 #line default
}
}
