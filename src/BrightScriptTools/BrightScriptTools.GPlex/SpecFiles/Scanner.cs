//
//  This CSharp output file generated by Gardens Point LEX
//  Gardens Point LEX (GPLEX) is Copyright (c) John Gough, QUT 2006-2014.
//  Output produced by GPLEX is the property of the user.
//  See accompanying file GPLEXcopyright.rtf.
//
//  GPLEX Version:  1.0.0.0
//  Machine:  OSTLT0248323
//  DateTime: 14/04/2016 12:18:57
//  UserName: CFE05
//  GPLEX input file <SpecFiles\BrightScriptLexer.lex - 14/04/2016 12:18:49>
//  GPLEX frame file <embedded resource>
//
//  Option settings: unicode, verbose, parser, stack, minimize
//  Option settings: classes, compressMap, compressNext, persistBuffer, noEmbedBuffers
//  Fallback code page: Target machine default
//

//
// Revised backup code
// Version 1.2.1 of 24-June-2013
//
//
#define BACKUP
#define STACK
#define BABEL
#define PERSIST

using System;
using System.IO;
using System.Text;
using System.Globalization;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Diagnostics.CodeAnalysis;

using BrightScriptTools.GPlex;
using System.Collections;
using BrightScriptTools.GPlex.Parser;

namespace BrightScriptTools.Compiler
{   
    /// <summary>
    /// Summary Canonical example of GPLEX automaton
    /// </summary>
    
#if STANDALONE
    //
    // These are the dummy declarations for stand-alone GPLEX applications
    // normally these declarations would come from the parser.
    // If you declare /noparser, or %option noparser then you get this.
    //

     public enum Tokens
    { 
      EOF = 0, maxParseToken = int.MaxValue 
      // must have at least these two, values are almost arbitrary
    }

     public abstract class ScanBase
    {
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly", MessageId = "yylex")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "yylex")]
        public abstract int yylex();

        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly", MessageId = "yywrap")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "yywrap")]
        protected virtual bool yywrap() { return true; }

#if BABEL
        protected abstract int CurrentSc { get; set; }
        // EolState is the 32-bit of state data persisted at 
        // the end of each line for Visual Studio colorization.  
        // The default is to return CurrentSc.  You must override
        // this if you want more complicated behavior.
        public virtual int EolState { 
            get { return CurrentSc; }
            set { CurrentSc = value; } 
        }
    }
    
     public interface IColorScan
    {
        void SetSource(string source, int offset);
        int GetNext(ref int state, out int start, out int end);
#endif // BABEL
    }

#endif // STANDALONE
    
    // If the compiler can't find the scanner base class maybe you
    // need to run GPPG with the /gplex option, or GPLEX with /noparser
#if BABEL
     public sealed partial class Scanner : ScanBase, IColorScan
    {
        private ScanBuff buffer;
        int currentScOrd;  // start condition ordinal
        
        protected override int CurrentSc 
        {
             // The current start state is a property
             // to try to avoid the user error of setting
             // scState but forgetting to update the FSA
             // start state "currentStart"
             //
             get { return currentScOrd; }  // i.e. return YY_START;
             set { currentScOrd = value;   // i.e. BEGIN(value);
                   currentStart = startState[value]; }
        }
#else  // BABEL
     public sealed partial class Scanner : ScanBase
    {
        private ScanBuff buffer;
        int currentScOrd;  // start condition ordinal
#endif // BABEL
        
        /// <summary>
        /// The input buffer for this scanner.
        /// </summary>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        public ScanBuff Buffer { get { return buffer; } }
        
        private static int GetMaxParseToken() {
     System.Reflection.FieldInfo f = typeof(Tokens).GetField("maxParseToken");
            return (f == null ? int.MaxValue : (int)f.GetValue(null));
        }
        
        static int parserMax = GetMaxParseToken();
        
        enum Result {accept, noMatch, contextFound};

        const int maxAccept = 254;
        const int initial = 255;
        const int eofNum = 0;
        const int goStart = -1;
        const int INITIAL = 0;

#region user code
#endregion user code

        int state;
        int currentStart = startState[0];
        int code;      // last code read
        int cCol;      // column number of code
        int lNum;      // current line number
        //
        // The following instance variables are used, among other
        // things, for constructing the yylloc location objects.
        //
        int tokPos;        // buffer position at start of token
        int tokCol;        // zero-based column number at start of token
        int tokLin;        // line number at start of token
        int tokEPos;       // buffer position at end of token
        int tokECol;       // column number at end of token
        int tokELin;       // line number at end of token
        string tokTxt;     // lazily constructed text of token
#if STACK          
        private Stack<int> scStack = new Stack<int>();
#endif // STACK

#region ScannerTables
    struct Table {
        public int min; public int rng; public int dflt;
        public short[] nxt;
        public Table(int m, int x, int d, short[] n) {
            min = m; rng = x; dflt = d; nxt = n;
        }
    };

    static int[] startState = new int[] {255, 0};

#region CompressedCharacterMap
    //
    // There are 51 equivalence classes
    // There are 4 character sequence regions
    // There are 2 tables, 172 entries
    // There are 2 runs, 0 singletons
    // Decision tree depth is 2
    //
    static sbyte[] mapC0 = new sbyte[126] {
/*     '\0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 32, 2, 2, 31, 2, 2, 
/*   '\x10' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/*   '\x20' */ 2, 2, 45, 2, 2, 2, 2, 1, 27, 28, 19, 33, 23, 34, 16, 24, 
/*      '0' */ 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 18, 17, 20, 22, 21, 42, 
/*      '@' */ 2, 14, 5, 8, 13, 12, 6, 43, 40, 10, 44, 50, 36, 38, 7, 11, 
/*      'P' */ 39, 48, 35, 3, 9, 4, 37, 41, 46, 47, 50, 25, 2, 26, 2, 50, 
/*      '`' */ 2, 14, 5, 8, 13, 12, 6, 43, 40, 10, 44, 50, 36, 38, 7, 11, 
/*      'p' */ 39, 48, 35, 3, 9, 4, 37, 41, 46, 47, 50, 29, 15, 30 };
    static sbyte[] mapC2 = new sbyte[46] {
/* '\u01C5' */ 0, 2, 2, 0, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u01D5' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u01E5' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0 };

    static sbyte MapC(int code)
    { // '\0' <= code <= '\U0010FFFF'
      if (code < 453) // '\0' <= code <= '\u01C4'
        if (code < 126) // '\0' <= code <= '}'
          return mapC0[code - 0];
        else // '~' <= code <= '\u01C4'
          return (sbyte)2;
      else // '\u01C5' <= code <= '\U0010FFFF'
        if (code < 499) // '\u01C5' <= code <= '\u01F2'
          return mapC2[code - 453];
        else // '\u01F3' <= code <= '\U0010FFFF'
          return (sbyte)2;
    }
#endregion

    static Table[] NxS = new Table[257] {
/* NxS[   0] */ new Table(0, 0, 0, null), // Shortest string ""
/* NxS[   1] */ // Shortest string "'"
      new Table(31, 21, 1, new short[] {-1, -1, 1, 1, 1, 1, 
          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1}),
/* NxS[   2] */ // Shortest string "S"
      new Table(35, 31, -1, new short[] {39, 244, 39, 39, 39, 39, 
          39, -1, 122, 39, -1, 39, 39, 67, 39, 39, -1, -1, -1, 39, 242, 39, 
          39, 39, 39, 243, 122, 39, 39, 39, 39}),
/* NxS[   3] */ // Shortest string "U"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 239, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 114, 39, 39, 39, 39, 39, 39}),
/* NxS[   4] */ // Shortest string "B"
      new Table(35, 31, -1, new short[] {232, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 39, 39, 231, 39, 39, 39}),
/* NxS[   5] */ // Shortest string "F"
      new Table(35, 31, -1, new short[] {39, 213, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 209, 39, 
          39, 39, 39, 39, 210, 211, 39, 39, 212}),
/* NxS[   6] */ // Shortest string "N"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 39, 39, 207, 39, 39, 39}),
/* NxS[   7] */ // Shortest string "C"
      new Table(35, 31, -1, new short[] {197, 39, 39, 39, 39, 67, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 194, 39, 39, 
          39, 39, 39, 39, 39, 195, 39, 196, 39}),
/* NxS[   8] */ // Shortest string "T"
      new Table(35, 31, -1, new short[] {190, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 191, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 39, 39, 189, 39, 39, 122}),
/* NxS[   9] */ // Shortest string "I"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          174, 175, 39, 39, 39, 39, 39, 39, 39}),
/* NxS[  10] */ // Shortest string "O"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 170, 
          39, 39, 39, 39, 39, 39, 39, 39, 39}),
/* NxS[  11] */ // Shortest string "E"
      new Table(35, 31, -1, new short[] {39, 163, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 164, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 161, 39, 39, 39, 39, 39, 39, 162}),
/* NxS[  12] */ // Shortest string "D"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 39, 39, 144, 145, 39, 39}),
/* NxS[  13] */ // Shortest string "A"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 143, 39, 109, 
          39, 39, 39, 122, 39, 39, 39, 39, 39}),
/* NxS[  14] */ new Table(0, 0, -1, null), // Shortest string "|"
/* NxS[  15] */ // Shortest string "."
      new Table(49, 1, -1, new short[] {44}),
/* NxS[  16] */ new Table(0, 0, -1, null), // Shortest string ";"
/* NxS[  17] */ new Table(0, 0, -1, null), // Shortest string ":"
/* NxS[  18] */ new Table(0, 0, -1, null), // Shortest string "*"
/* NxS[  19] */ // Shortest string "<"
      new Table(21, 2, -1, new short[] {141, 142}),
/* NxS[  20] */ // Shortest string ">"
      new Table(22, 1, -1, new short[] {140}),
/* NxS[  21] */ new Table(0, 0, -1, null), // Shortest string "="
/* NxS[  22] */ new Table(0, 0, -1, null), // Shortest string ","
/* NxS[  23] */ new Table(0, 0, -1, null), // Shortest string "/"
/* NxS[  24] */ new Table(0, 0, -1, null), // Shortest string "["
/* NxS[  25] */ new Table(0, 0, -1, null), // Shortest string "]"
/* NxS[  26] */ new Table(0, 0, -1, null), // Shortest string "("
/* NxS[  27] */ new Table(0, 0, -1, null), // Shortest string ")"
/* NxS[  28] */ new Table(0, 0, -1, null), // Shortest string "{"
/* NxS[  29] */ new Table(0, 0, -1, null), // Shortest string "}"
/* NxS[  30] */ // Shortest string "\r"
      new Table(32, 1, -1, new short[] {31}),
/* NxS[  31] */ new Table(0, 0, -1, null), // Shortest string "\n"
/* NxS[  32] */ new Table(0, 0, -1, null), // Shortest string "+"
/* NxS[  33] */ new Table(0, 0, -1, null), // Shortest string "-"
/* NxS[  34] */ // Shortest string "R"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 122, 39, 
          39, 101, 39, 39, 123, 39, 124, 39, 39}),
/* NxS[  35] */ // Shortest string "L"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 114, 39, 115, 116, 117, 39, 39}),
/* NxS[  36] */ // Shortest string "V"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 39, 39, 110, 39, 39, 111}),
/* NxS[  37] */ // Shortest string "M"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 39, 101, 39, 39, 39, 102}),
/* NxS[  38] */ // Shortest string "P"
      new Table(35, 31, -1, new short[] {97, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 39, 39, 39, 39, 39, 39}),
/* NxS[  39] */ // Shortest string "H"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 39, 39, 39, 39, 39, 39}),
/* NxS[  40] */ // Shortest string "W"
      new Table(35, 31, -1, new short[] {81, 39, 39, 39, 39, 82, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 39, 39, 39, 39, 39, 80}),
/* NxS[  41] */ new Table(0, 0, -1, null), // Shortest string "?"
/* NxS[  42] */ // Shortest string "G"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 39, 39, 39, 46, 39, 39}),
/* NxS[  43] */ // Shortest string "0"
      new Table(49, 19, -1, new short[] {43, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44}),
/* NxS[  44] */ // Shortest string ".0"
      new Table(49, 1, -1, new short[] {44}),
/* NxS[  45] */ // Shortest string "\"\""
      new Table(31, 21, 256, new short[] {-1, -1, 256, 256, 256, 256, 
          256, 256, 256, 256, 256, 256, 256, 256, 45, 256, 256, 256, 256, 256, -1}),
/* NxS[  46] */ // Shortest string "GE"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 47, 39, 39, 39, 39, 39}),
/* NxS[  47] */ // Shortest string "GET"
      new Table(35, 31, -1, new short[] {39, 49, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 39, 48, 39, 39, 39, 39}),
/* NxS[  48] */ // Shortest string "GETI"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 73, 39, 39, 39, 39, 39, 39, 39}),
/* NxS[  49] */ // Shortest string "GETL"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 39, 39, 39, 39, 39, 50}),
/* NxS[  50] */ // Shortest string "GETLA"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 51, 39, 39, 
          39, 39, 39, 39, 39, 39, 39, 39, 39}),
/* NxS[  51] */ // Shortest string "GETLAS"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 52, 39, 39, 39, 39, 39}),
/* NxS[  52] */ // Shortest string "GETLAST"
      new Table(35, 31, -1, new short[] {53, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 39, 39, 39, 39, 39, 39}),
/* NxS[  53] */ // Shortest string "GETLASTR"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 54, 39, 
          39, 39, 39, 39, 39, 39, 39, 39, 39}),
/* NxS[  54] */ // Shortest string "GETLASTRU"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 55, 39, 39, 39, 39, 39, 39, 39}),
/* NxS[  55] */ // Shortest string "GETLASTRUN"
      new Table(35, 31, -1, new short[] {57, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 56, 39, 39, 39, 39, 39, 39}),
/* NxS[  56] */ // Shortest string "GETLASTRUNC"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 39, 39, 69, 39, 39, 39}),
/* NxS[  57] */ // Shortest string "GETLASTRUNR"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 58, 39, 
          39, 39, 39, 39, 39, 39, 39, 39, 39}),
/* NxS[  58] */ // Shortest string "GETLASTRUNRU"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 59, 39, 39, 39, 39, 39, 39, 39}),
/* NxS[  59] */ // Shortest string "GETLASTRUNRUN"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 60, 39, 39, 39, 39, 39}),
/* NxS[  60] */ // Shortest string "GETLASTRUNRUNT"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 39, 61, 39, 39, 39, 39}),
/* NxS[  61] */ // Shortest string "GETLASTRUNRUNTI"
      new Table(35, 31, -1, new short[] {39, 39, 39, 62, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 39, 39, 39, 39, 39, 39}),
/* NxS[  62] */ // Shortest string "GETLASTRUNCOMPIL"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 39, 39, 39, 63, 39, 39}),
/* NxS[  63] */ // Shortest string "GETLASTRUNCOMPILE"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 39, 39, 39, 64, 39, 39}),
/* NxS[  64] */ // Shortest string "GETLASTRUNCOMPILEE"
      new Table(35, 31, -1, new short[] {65, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 39, 39, 39, 39, 39, 39}),
/* NxS[  65] */ // Shortest string "GETLASTRUNCOMPILEER"
      new Table(35, 31, -1, new short[] {66, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 39, 39, 39, 39, 39, 39}),
/* NxS[  66] */ // Shortest string "GETLASTRUNCOMPILEERR"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 39, 39, 67, 39, 39, 39}),
/* NxS[  67] */ // Shortest string "SQ"
      new Table(35, 31, -1, new short[] {68, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 39, 39, 39, 39, 39, 39}),
/* NxS[  68] */ // Shortest string "SIN"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 39, 39, 39, 39, 39, 39}),
/* NxS[  69] */ // Shortest string "GETLASTRUNCO"
      new Table(35, 31, -1, new short[] {39, 39, 39, 70, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 39, 39, 39, 39, 39, 39}),
/* NxS[  70] */ // Shortest string "GETLASTRUNCOM"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 71, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 39, 39, 39, 39, 39, 39}),
/* NxS[  71] */ // Shortest string "GETLASTRUNCOMP"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 39, 72, 39, 39, 39, 39}),
/* NxS[  72] */ // Shortest string "GETLASTRUNCOMPI"
      new Table(35, 31, -1, new short[] {39, 62, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 39, 39, 39, 39, 39, 39}),
/* NxS[  73] */ // Shortest string "GETIN"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 74, 39, 39, 39, 39, 39}),
/* NxS[  74] */ // Shortest string "GETINT"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 39, 39, 39, 75, 39, 39}),
/* NxS[  75] */ // Shortest string "GETINTE"
      new Table(35, 31, -1, new short[] {76, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 39, 39, 39, 39, 39, 39}),
/* NxS[  76] */ // Shortest string "GETINTER"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          77, 39, 39, 39, 39, 39, 39, 39, 39}),
/* NxS[  77] */ // Shortest string "GETINTERF"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 39, 39, 39, 39, 39, 78}),
/* NxS[  78] */ // Shortest string "GETINTERFA"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 79, 39, 39, 39, 39, 39, 39}),
/* NxS[  79] */ // Shortest string "TYP"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 39, 39, 39, 68, 39, 39}),
/* NxS[  80] */ // Shortest string "WA"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 39, 96, 39, 39, 39, 39}),
/* NxS[  81] */ // Shortest string "WR"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 39, 86, 39, 39, 39, 39}),
/* NxS[  82] */ // Shortest string "WH"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 39, 83, 39, 39, 39, 39}),
/* NxS[  83] */ // Shortest string "WHI"
      new Table(35, 31, -1, new short[] {39, 84, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 39, 39, 39, 39, 39, 39}),
/* NxS[  84] */ // Shortest string "WHIL"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 39, 39, 39, 85, 39, 39}),
/* NxS[  85] */ // Shortest string "WHILE"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 39, 39, 39, 39, 39, 39}),
/* NxS[  86] */ // Shortest string "WRI"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 87, 39, 39, 39, 39, 39}),
/* NxS[  87] */ // Shortest string "WRIT"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 39, 39, 39, 88, 39, 39}),
/* NxS[  88] */ // Shortest string "READ"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 39, 39, 39, 39, 39, 89}),
/* NxS[  89] */ // Shortest string "READA"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 90, 39, 39, 
          39, 39, 39, 39, 39, 39, 39, 39, 39}),
/* NxS[  90] */ // Shortest string "READAS"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 91, 39, 39, 39, 39, 39, 39}),
/* NxS[  91] */ // Shortest string "READASC"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 39, 92, 39, 39, 39, 39}),
/* NxS[  92] */ // Shortest string "READASCI"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 39, 93, 39, 39, 39, 39}),
/* NxS[  93] */ // Shortest string "COPY"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          94, 39, 39, 39, 39, 39, 39, 39, 39}),
/* NxS[  94] */ // Shortest string "COPYF"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 39, 95, 39, 39, 39, 39}),
/* NxS[  95] */ // Shortest string "COPYFI"
      new Table(35, 31, -1, new short[] {39, 79, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 39, 39, 39, 39, 39, 39}),
/* NxS[  96] */ // Shortest string "LEF"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 68, 39, 39, 39, 39, 39}),
/* NxS[  97] */ // Shortest string "PR"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 39, 98, 39, 39, 39, 39}),
/* NxS[  98] */ // Shortest string "PRI"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 99, 39, 39, 39, 39, 39, 39, 39}),
/* NxS[  99] */ // Shortest string "PRIN"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 100, 39, 39, 39, 39, 39}),
/* NxS[ 100] */ // Shortest string "PRINT"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 39, 39, 39, 39, 39, 39}),
/* NxS[ 101] */ // Shortest string "RN"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 39, 39, 39, 39, 68, 39}),
/* NxS[ 102] */ // Shortest string "MA"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 103, 39, 39, 39, 39, 39}),
/* NxS[ 103] */ // Shortest string "MAT"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 104, 39, 39, 39, 39, 39, 39}),
/* NxS[ 104] */ // Shortest string "MATC"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 105, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 39, 39, 39, 39, 39, 39}),
/* NxS[ 105] */ // Shortest string "MATCH"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          106, 39, 39, 39, 39, 39, 39, 39, 39}),
/* NxS[ 106] */ // Shortest string "MATCHF"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 39, 107, 39, 39, 39, 39}),
/* NxS[ 107] */ // Shortest string "MATCHFI"
      new Table(35, 31, -1, new short[] {39, 108, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 39, 39, 39, 39, 39, 39}),
/* NxS[ 108] */ // Shortest string "MATCHFIL"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 39, 39, 39, 109, 39, 39}),
/* NxS[ 109] */ // Shortest string "AB"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 68, 39, 39, 
          39, 39, 39, 39, 39, 39, 39, 39, 39}),
/* NxS[ 110] */ // Shortest string "VO"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 39, 112, 39, 39, 39, 39}),
/* NxS[ 111] */ // Shortest string "VA"
      new Table(35, 31, -1, new short[] {39, 68, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 39, 39, 39, 39, 39, 39}),
/* NxS[ 112] */ // Shortest string "VOI"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 39, 39, 39, 39, 113, 39}),
/* NxS[ 113] */ // Shortest string "VOID"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 39, 39, 39, 39, 39, 39}),
/* NxS[ 114] */ // Shortest string "UC"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 39, 39, 39, 39, 39, 121}),
/* NxS[ 115] */ // Shortest string "LI"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 118, 39, 39, 
          39, 39, 39, 39, 39, 39, 39, 39, 39}),
/* NxS[ 116] */ // Shortest string "LO"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 68, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 39, 39, 39, 39, 39, 39}),
/* NxS[ 117] */ // Shortest string "LE"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          96, 68, 39, 39, 39, 39, 39, 39, 39}),
/* NxS[ 118] */ // Shortest string "LIS"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 119, 39, 39, 39, 39, 39}),
/* NxS[ 119] */ // Shortest string "LIST"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 39, 39, 39, 39, 120, 39}),
/* NxS[ 120] */ // Shortest string "LISTD"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 39, 67, 39, 39, 39, 39}),
/* NxS[ 121] */ // Shortest string "UCA"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 79, 39, 39, 
          39, 39, 39, 39, 39, 39, 39, 39, 39}),
/* NxS[ 122] */ // Shortest string "SI"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 68, 39, 39, 39, 39, 39, 39, 39}),
/* NxS[ 123] */ // Shortest string "RI"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 139, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 39, 39, 39, 39, 39, 39}),
/* NxS[ 124] */ // Shortest string "RE"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 125, 
          39, 39, 39, 126, 39, 39, 39, 39, 127}),
/* NxS[ 125] */ // Shortest string "REB"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 39, 39, 131, 39, 39, 39}),
/* NxS[ 126] */ // Shortest string "RET"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 128, 39, 
          39, 39, 39, 39, 39, 39, 39, 39, 39}),
/* NxS[ 127] */ // Shortest string "REA"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 39, 39, 39, 39, 88, 39}),
/* NxS[ 128] */ // Shortest string "RETU"
      new Table(35, 31, -1, new short[] {129, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 39, 39, 39, 39, 39, 39}),
/* NxS[ 129] */ // Shortest string "RETUR"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 130, 39, 39, 39, 39, 39, 39, 39}),
/* NxS[ 130] */ // Shortest string "RETURN"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 39, 39, 39, 39, 39, 39}),
/* NxS[ 131] */ // Shortest string "REBO"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 39, 39, 132, 39, 39, 39}),
/* NxS[ 132] */ // Shortest string "REBOO"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 133, 39, 39, 39, 39, 39}),
/* NxS[ 133] */ // Shortest string "REBOOT"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 134, 39, 39, 
          39, 39, 39, 39, 39, 39, 39, 39, 39}),
/* NxS[ 134] */ // Shortest string "REBOOTS"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 135, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 39, 39, 39, 39, 39, 39}),
/* NxS[ 135] */ // Shortest string "REBOOTSY"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 136, 39, 39, 
          39, 39, 39, 39, 39, 39, 39, 39, 39}),
/* NxS[ 136] */ // Shortest string "REBOOTSYS"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 137, 39, 39, 39, 39, 39}),
/* NxS[ 137] */ // Shortest string "REBOOTSYST"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 39, 39, 39, 138, 39, 39}),
/* NxS[ 138] */ // Shortest string "REBOOTSYSTE"
      new Table(35, 31, -1, new short[] {39, 39, 39, 68, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 39, 39, 39, 39, 39, 39}),
/* NxS[ 139] */ // Shortest string "RIG"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 96, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 39, 39, 39, 39, 39, 39}),
/* NxS[ 140] */ new Table(0, 0, -1, null), // Shortest string ">="
/* NxS[ 141] */ new Table(0, 0, -1, null), // Shortest string "<>"
/* NxS[ 142] */ new Table(0, 0, -1, null), // Shortest string "<="
/* NxS[ 143] */ // Shortest string "AS"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 68, 39, 39, 39, 39, 39, 39}),
/* NxS[ 144] */ // Shortest string "DO"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 158, 39, 
          39, 39, 39, 39, 39, 39, 39, 39, 39}),
/* NxS[ 145] */ // Shortest string "DE"
      new Table(35, 31, -1, new short[] {39, 146, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 39, 39, 39, 39, 39, 39}),
/* NxS[ 146] */ // Shortest string "DEL"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 39, 39, 39, 147, 39, 39}),
/* NxS[ 147] */ // Shortest string "DELE"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 148, 39, 39, 39, 39, 39}),
/* NxS[ 148] */ // Shortest string "DELET"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 39, 39, 39, 149, 39, 39}),
/* NxS[ 149] */ // Shortest string "DELETE"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          94, 39, 39, 39, 39, 39, 39, 150, 39}),
/* NxS[ 150] */ // Shortest string "CREATED"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 39, 151, 39, 39, 39, 39}),
/* NxS[ 151] */ // Shortest string "CREATEDI"
      new Table(35, 31, -1, new short[] {152, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 39, 39, 39, 39, 39, 39}),
/* NxS[ 152] */ // Shortest string "CREATEDIR"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 39, 39, 39, 153, 39, 39}),
/* NxS[ 153] */ // Shortest string "CREATEDIRE"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 154, 39, 39, 39, 39, 39, 39}),
/* NxS[ 154] */ // Shortest string "CREATEDIREC"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 155, 39, 39, 39, 39, 39}),
/* NxS[ 155] */ // Shortest string "CREATEDIRECT"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 39, 39, 156, 39, 39, 39}),
/* NxS[ 156] */ // Shortest string "CREATEDIRECTO"
      new Table(35, 31, -1, new short[] {157, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 39, 39, 39, 39, 39, 39}),
/* NxS[ 157] */ // Shortest string "CREATEDIRECTOR"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 68, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 39, 39, 39, 39, 39, 39}),
/* NxS[ 158] */ // Shortest string "DOU"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 159, 
          39, 39, 39, 39, 39, 39, 39, 39, 39}),
/* NxS[ 159] */ // Shortest string "DOUB"
      new Table(35, 31, -1, new short[] {39, 160, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 39, 39, 39, 39, 39, 39}),
/* NxS[ 160] */ // Shortest string "DOUBL"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 39, 39, 39, 113, 39, 39}),
/* NxS[ 161] */ // Shortest string "EN"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 39, 39, 39, 39, 169, 39}),
/* NxS[ 162] */ // Shortest string "EA"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 167, 39, 39, 39, 39, 39, 39}),
/* NxS[ 163] */ // Shortest string "EL"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 165, 39, 39, 
          39, 39, 39, 39, 39, 39, 39, 39, 39}),
/* NxS[ 164] */ // Shortest string "EX"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 68, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 39, 39, 39, 39, 39, 39}),
/* NxS[ 165] */ // Shortest string "ELS"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 39, 39, 39, 166, 39, 39}),
/* NxS[ 166] */ // Shortest string "ELSE"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 39, 39, 39, 39, 39, 39}),
/* NxS[ 167] */ // Shortest string "EAC"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 168, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 39, 39, 39, 39, 39, 39}),
/* NxS[ 168] */ // Shortest string "EACH"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 39, 39, 39, 39, 39, 39}),
/* NxS[ 169] */ // Shortest string "END"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 39, 39, 39, 39, 39, 39}),
/* NxS[ 170] */ // Shortest string "OB"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 171, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 39, 39, 39, 39, 39, 39}),
/* NxS[ 171] */ // Shortest string "OBJ"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 39, 39, 39, 172, 39, 39}),
/* NxS[ 172] */ // Shortest string "OBJE"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 173, 39, 39, 39, 39, 39, 39}),
/* NxS[ 173] */ // Shortest string "FLOA"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 113, 39, 39, 39, 39, 39}),
/* NxS[ 174] */ // Shortest string "IF"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 39, 39, 39, 39, 39, 39}),
/* NxS[ 175] */ // Shortest string "IN"
      new Table(35, 31, -1, new short[] {39, 39, 178, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 176, 39, 39, 
          39, 39, 39, 177, 39, 39, 39, 39, 39}),
/* NxS[ 176] */ // Shortest string "INS"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 67, 39, 39, 39, 39, 39}),
/* NxS[ 177] */ // Shortest string "INT"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 39, 39, 39, 183, 39, 39}),
/* NxS[ 178] */ // Shortest string "INV"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 39, 39, 39, 39, 39, 179}),
/* NxS[ 179] */ // Shortest string "INVA"
      new Table(35, 31, -1, new short[] {39, 180, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 39, 39, 39, 39, 39, 39}),
/* NxS[ 180] */ // Shortest string "INVAL"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 39, 181, 39, 39, 39, 39}),
/* NxS[ 181] */ // Shortest string "INVALI"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 39, 39, 39, 39, 182, 39}),
/* NxS[ 182] */ // Shortest string "INVALID"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 39, 39, 39, 39, 39, 39}),
/* NxS[ 183] */ // Shortest string "INTE"
      new Table(35, 31, -1, new short[] {184, 39, 39, 39, 39, 39, 
          39, -1, 185, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 39, 39, 39, 39, 39, 39}),
/* NxS[ 184] */ // Shortest string "INTER"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          187, 39, 39, 39, 39, 39, 39, 39, 39}),
/* NxS[ 185] */ // Shortest string "INTEG"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 39, 39, 39, 186, 39, 39}),
/* NxS[ 186] */ // Shortest string "INTEGE"
      new Table(35, 31, -1, new short[] {113, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 39, 39, 39, 39, 39, 39}),
/* NxS[ 187] */ // Shortest string "INTERF"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 39, 39, 39, 39, 39, 188}),
/* NxS[ 188] */ // Shortest string "INTERFA"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 160, 39, 39, 39, 39, 39, 39}),
/* NxS[ 189] */ // Shortest string "TO"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 39, 39, 39, 39, 39, 39}),
/* NxS[ 190] */ // Shortest string "TR"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 192, 39, 
          39, 39, 39, 39, 39, 39, 39, 39, 39}),
/* NxS[ 191] */ // Shortest string "TY"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 79, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 39, 39, 39, 39, 39, 39}),
/* NxS[ 192] */ // Shortest string "TRU"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 39, 39, 39, 193, 39, 39}),
/* NxS[ 193] */ // Shortest string "TRUE"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 39, 39, 39, 39, 39, 39}),
/* NxS[ 194] */ // Shortest string "CS"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 116, 39, 39, 39, 39, 39, 39, 39}),
/* NxS[ 195] */ // Shortest string "CO"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 206, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 68, 39, 39, 
          39, 39, 39, 39, 39, 39, 39, 39, 39}),
/* NxS[ 196] */ // Shortest string "CD"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 111, 
          39, 39, 39, 39, 39, 39, 39, 39, 39}),
/* NxS[ 197] */ // Shortest string "CR"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 39, 39, 39, 198, 39, 39}),
/* NxS[ 198] */ // Shortest string "CRE"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 39, 39, 39, 39, 39, 199}),
/* NxS[ 199] */ // Shortest string "CREA"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 200, 39, 39, 39, 39, 39}),
/* NxS[ 200] */ // Shortest string "CREAT"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 39, 39, 39, 201, 39, 39}),
/* NxS[ 201] */ // Shortest string "CREATE"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 39, 39, 202, 39, 150, 39}),
/* NxS[ 202] */ // Shortest string "CREATEO"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 203, 
          39, 39, 39, 39, 39, 39, 39, 39, 39}),
/* NxS[ 203] */ // Shortest string "CREATEOB"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 204, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 39, 39, 39, 39, 39, 39}),
/* NxS[ 204] */ // Shortest string "CREATEOBJ"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 39, 39, 39, 205, 39, 39}),
/* NxS[ 205] */ // Shortest string "CREATEOBJE"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 96, 39, 39, 39, 39, 39, 39}),
/* NxS[ 206] */ // Shortest string "COP"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 93, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 39, 39, 39, 39, 39, 39}),
/* NxS[ 207] */ // Shortest string "NO"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 208, 39, 39, 39, 39, 39}),
/* NxS[ 208] */ // Shortest string "NOT"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 39, 39, 39, 39, 39, 39}),
/* NxS[ 209] */ // Shortest string "FU"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 225, 39, 39, 39, 39, 39, 39, 39}),
/* NxS[ 210] */ // Shortest string "FI"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 68, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 39, 39, 39, 39, 39, 39}),
/* NxS[ 211] */ // Shortest string "FO"
      new Table(35, 31, -1, new short[] {218, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 39, 39, 39, 39, 39, 39}),
/* NxS[ 212] */ // Shortest string "FA"
      new Table(35, 31, -1, new short[] {39, 215, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 39, 39, 39, 39, 39, 39}),
/* NxS[ 213] */ // Shortest string "FL"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 39, 39, 214, 39, 39, 39}),
/* NxS[ 214] */ // Shortest string "FLO"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 39, 39, 39, 39, 39, 173}),
/* NxS[ 215] */ // Shortest string "FAL"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 216, 39, 39, 
          39, 39, 39, 39, 39, 39, 39, 39, 39}),
/* NxS[ 216] */ // Shortest string "FALS"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 39, 39, 39, 217, 39, 39}),
/* NxS[ 217] */ // Shortest string "FALSE"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 39, 39, 39, 39, 39, 39}),
/* NxS[ 218] */ // Shortest string "FOR"
      new Table(35, 31, -1, new short[] {39, 39, 39, 219, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 39, 39, 39, 39, 39, 39}),
/* NxS[ 219] */ // Shortest string "FORM"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 39, 39, 39, 39, 39, 220}),
/* NxS[ 220] */ // Shortest string "FORMA"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 221, 39, 39, 39, 39, 39}),
/* NxS[ 221] */ // Shortest string "FORMAT"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 39, 39, 39, 39, 222, 39}),
/* NxS[ 222] */ // Shortest string "FORMATD"
      new Table(35, 31, -1, new short[] {223, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 39, 39, 39, 39, 39, 39}),
/* NxS[ 223] */ // Shortest string "FORMATDR"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 39, 224, 39, 39, 39, 39}),
/* NxS[ 224] */ // Shortest string "FORMATDRI"
      new Table(35, 31, -1, new short[] {39, 39, 79, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 39, 39, 39, 39, 39, 39}),
/* NxS[ 225] */ // Shortest string "FUN"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 226, 39, 39, 39, 39, 39, 39}),
/* NxS[ 226] */ // Shortest string "FUNC"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 227, 39, 39, 39, 39, 39}),
/* NxS[ 227] */ // Shortest string "FUNCT"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 39, 228, 39, 39, 39, 39}),
/* NxS[ 228] */ // Shortest string "FUNCTI"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 39, 39, 229, 39, 39, 39}),
/* NxS[ 229] */ // Shortest string "FUNCTIO"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 230, 39, 39, 39, 39, 39, 39, 39}),
/* NxS[ 230] */ // Shortest string "FUNCTION"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 39, 39, 39, 39, 39, 39}),
/* NxS[ 231] */ // Shortest string "BO"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 68, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 39, 39, 235, 39, 39, 39}),
/* NxS[ 232] */ // Shortest string "BR"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 233, 39, 39, 
          39, 39, 39, 39, 39, 39, 39, 39, 39}),
/* NxS[ 233] */ // Shortest string "BRS"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 234, 39, 
          39, 39, 39, 39, 39, 39, 39, 39, 39}),
/* NxS[ 234] */ // Shortest string "BRSU"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 113, 
          39, 39, 39, 39, 39, 39, 39, 39, 39}),
/* NxS[ 235] */ // Shortest string "BOO"
      new Table(35, 31, -1, new short[] {39, 236, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 39, 39, 39, 39, 39, 39}),
/* NxS[ 236] */ // Shortest string "BOOL"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 39, 39, 39, 237, 39, 39}),
/* NxS[ 237] */ // Shortest string "BOOLE"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 39, 39, 39, 39, 39, 238}),
/* NxS[ 238] */ // Shortest string "BOOLEA"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 113, 39, 39, 39, 39, 39, 39, 39}),
/* NxS[ 239] */ // Shortest string "UP"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 240, 39, 39, 39, 39, 39}),
/* NxS[ 240] */ // Shortest string "UPT"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 39, 241, 39, 39, 39, 39}),
/* NxS[ 241] */ // Shortest string "UPTI"
      new Table(35, 31, -1, new short[] {39, 39, 39, 79, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 39, 39, 39, 39, 39, 39}),
/* NxS[ 242] */ // Shortest string "SU"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 254, 
          39, 39, 39, 39, 39, 39, 39, 39, 39}),
/* NxS[ 243] */ // Shortest string "ST"
      new Table(35, 31, -1, new short[] {248, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 39, 39, 246, 247, 39, 39}),
/* NxS[ 244] */ // Shortest string "SL"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 39, 39, 39, 245, 39, 39}),
/* NxS[ 245] */ // Shortest string "SLE"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 39, 39, 39, 164, 39, 39}),
/* NxS[ 246] */ // Shortest string "STO"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 253, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 39, 39, 39, 39, 39, 39}),
/* NxS[ 247] */ // Shortest string "STE"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 252, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 39, 39, 39, 39, 39, 39}),
/* NxS[ 248] */ // Shortest string "STR"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 39, 249, 39, 39, 39, 39}),
/* NxS[ 249] */ // Shortest string "STRI"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 250, 39, 39, 39, 39, 39, 39, 39}),
/* NxS[ 250] */ // Shortest string "STRIN"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 251, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 39, 39, 39, 39, 39, 39}),
/* NxS[ 251] */ // Shortest string "STRING"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 39, 68, 39, 39, 39, 39}),
/* NxS[ 252] */ // Shortest string "STEP"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 39, 39, 39, 39, 39, 39}),
/* NxS[ 253] */ // Shortest string "STOP"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 39, 39, 39, 39, 39, 39}),
/* NxS[ 254] */ // Shortest string "SUB"
      new Table(35, 31, -1, new short[] {39, 39, 39, 39, 39, 39, 
          39, -1, 39, 39, -1, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, 
          39, 39, 39, 39, 39, 39, 39, 39, 39}),
/* NxS[ 255] */ // Shortest string ""
      new Table(49, 48, 39, new short[] {43, 39, -1, 1, -1, 2, 
          3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 
          19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 
          35, 36, 37, 38, 39, 40, 41, 42, 39, 256}),
/* NxS[ 256] */ // Shortest string "\""
      new Table(31, 21, 256, new short[] {-1, -1, 256, 256, 256, 256, 
          256, 256, 256, 256, 256, 256, 256, 256, 45, 256, 256, 256, 256, 256, -1}),
    };

int NextState() {
    if (code == ScanBuff.EndOfFile)
        return eofNum;
    else
        unchecked {
            int rslt;
            int idx = MapC(code) - NxS[state].min;
            if (idx < 0) idx += 51;
            if ((uint)idx >= (uint)NxS[state].rng) rslt = NxS[state].dflt;
            else rslt = NxS[state].nxt[idx];
            return rslt;
        }
}

#endregion


#if BACKUP
        // ==============================================================
        // == Nested struct used for backup in automata that do backup ==
        // ==============================================================

        struct Context // class used for automaton backup.
        {
            public int bPos;
            public int rPos; // scanner.readPos saved value
            public int cCol;
            public int lNum; // Need this in case of backup over EOL.
            public int state;
            public int cChr;
        }
        
        private Context ctx = new Context();
#endif // BACKUP

        // ==============================================================
        // ==== Nested struct to support input switching in scanners ====
        // ==============================================================

		struct BufferContext {
            internal ScanBuff buffSv;
			internal int chrSv;
			internal int cColSv;
			internal int lNumSv;
		}

        // ==============================================================
        // ===== Private methods to save and restore buffer contexts ====
        // ==============================================================

        /// <summary>
        /// This method creates a buffer context record from
        /// the current buffer object, together with some
        /// scanner state values. 
        /// </summary>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        BufferContext MkBuffCtx()
		{
			BufferContext rslt;
			rslt.buffSv = this.buffer;
			rslt.chrSv = this.code;
			rslt.cColSv = this.cCol;
			rslt.lNumSv = this.lNum;
			return rslt;
		}

        /// <summary>
        /// This method restores the buffer value and allied
        /// scanner state from the given context record value.
        /// </summary>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        void RestoreBuffCtx(BufferContext value)
		{
			this.buffer = value.buffSv;
			this.code = value.chrSv;
			this.cCol = value.cColSv;
			this.lNum = value.lNumSv;
        } 
        // =================== End Nested classes =======================

#if !NOFILES
     public Scanner(Stream file) {
            SetSource(file, 0); // unicode option
        }

        public Scanner(Stream file, string codepage) {
            SetSource(file, CodePageHandling.GetCodePage(codepage));
        }   
#endif // !NOFILES

     public Scanner() { }

        private int readPos;

        void GetCode()
        {
            if (code == '\n')  // This needs to be fixed for other conventions
                               // i.e. [\r\n\205\u2028\u2029]
            { 
                cCol = -1;
                lNum++;
            }
            readPos = buffer.Pos;

            // Now read new codepoint.
            code = buffer.Read();
            if (code > ScanBuff.EndOfFile)
            {
#if (!BYTEMODE)
                if (code >= 0xD800 && code <= 0xDBFF)
                {
                    int next = buffer.Read();
                    if (next < 0xDC00 || next > 0xDFFF)
                        code = ScanBuff.UnicodeReplacementChar;
                    else
                        code = (0x10000 + ((code & 0x3FF) << 10) + (next & 0x3FF));
                }
#endif
                cCol++;
            }
        }

        void MarkToken()
        {
#if (!PERSIST)
            buffer.Mark();
#endif
            tokPos = readPos;
            tokLin = lNum;
            tokCol = cCol;
        }
        
        void MarkEnd()
        {
            tokTxt = null;
            tokEPos = readPos;
            tokELin = lNum;
            tokECol = cCol;
        }

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        int Peek()
        {
            int rslt, codeSv = code, cColSv = cCol, lNumSv = lNum, bPosSv = buffer.Pos;
            GetCode(); rslt = code;
            lNum = lNumSv; cCol = cColSv; code = codeSv; buffer.Pos = bPosSv;
            return rslt;
        }

        // ==============================================================
        // =====    Initialization of string-based input buffers     ====
        // ==============================================================

        /// <summary>
        /// Create and initialize a StringBuff buffer object for this scanner
        /// </summary>
        /// <param name="source">the input string</param>
        /// <param name="offset">starting offset in the string</param>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        public void SetSource(string source, int offset)
        {
            this.buffer = ScanBuff.GetBuffer(source);
            this.buffer.Pos = offset;
            this.lNum = 0;
            this.code = '\n'; // to initialize yyline, yycol and lineStart
            GetCode();
        }

        // ================ LineBuffer Initialization ===================
        /// <summary>
        /// Create and initialize a LineBuff buffer object for this scanner
        /// </summary>
        /// <param name="source">the list of input strings</param>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        public void SetSource(IList<string> source)
        {
            this.buffer = ScanBuff.GetBuffer(source);
            this.code = '\n'; // to initialize yyline, yycol and lineStart
            this.lNum = 0;
            GetCode();
        }

#if !NOFILES        
        // =============== StreamBuffer Initialization ==================

        /// <summary>
        /// Create and initialize a StreamBuff buffer object for this scanner.
        /// StreamBuff is buffer for 8-bit byte files.
        /// </summary>
        /// <param name="source">the input byte stream</param>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        public void SetSource(Stream source)
        {
            this.buffer = ScanBuff.GetBuffer(source);
            this.lNum = 0;
            this.code = '\n'; // to initialize yyline, yycol and lineStart
            GetCode();
        }
        
#if !BYTEMODE
        // ================ TextBuffer Initialization ===================

        /// <summary>
        /// Create and initialize a TextBuff buffer object for this scanner.
        /// TextBuff is a buffer for encoded unicode files.
        /// </summary>
        /// <param name="source">the input text file</param>
        /// <param name="fallbackCodePage">Code page to use if file has
        /// no BOM. For 0, use machine default; for -1, 8-bit binary</param>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        public void SetSource(Stream source, int fallbackCodePage)
        {
            this.buffer = ScanBuff.GetBuffer(source, fallbackCodePage);
            this.lNum = 0;
            this.code = '\n'; // to initialize yyline, yycol and lineStart
            GetCode();
        }
#endif // !BYTEMODE
#endif // !NOFILES
        
        // ==============================================================

#if BABEL
        //
        //  Get the next token for Visual Studio
        //
        //  "state" is the inout mode variable that maintains scanner
        //  state between calls, using the EolState property. In principle,
        //  if the calls of EolState are costly set could be called once
        //  only per line, at the start; and get called only at the end
        //  of the line. This needs more infrastructure ...
        //
        public int GetNext(ref int state, out int start, out int end)
        {
                Tokens next;
            int s, e;
            s = state;        // state at start
            EolState = state;
                next = (Tokens)Scan();
            state = EolState;
            e = state;       // state at end;
            start = tokPos;
            end = tokEPos - 1; // end is the index of last char.
            return (int)next;
        }        
#endif // BABEL

        // ======== AbstractScanner<> Implementation =========

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly", MessageId = "yylex")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "yylex")]
        public override int yylex()
        {
            // parserMax is set by reflecting on the Tokens
            // enumeration.  If maxParseToken is defined
            // that is used, otherwise int.MaxValue is used.
            int next;
            do { next = Scan(); } while (next >= parserMax);
            return next;
        }
        
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        int yypos { get { return tokPos; } }
        
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        int yyline { get { return tokLin; } }
        
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        int yycol { get { return tokCol; } }

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly", MessageId = "yytext")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "yytext")]
        public string yytext
        {
            get 
            {
                if (tokTxt == null) 
                    tokTxt = buffer.GetString(tokPos, tokEPos);
                return tokTxt;
            }
        }

        /// <summary>
        /// Discards all but the first "n" codepoints in the recognized pattern.
        /// Resets the buffer position so that only n codepoints have been consumed;
        /// yytext is also re-evaluated. 
        /// </summary>
        /// <param name="n">The number of codepoints to consume</param>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        void yyless(int n)
        {
            buffer.Pos = tokPos;
            // Must read at least one char, so set before start.
            cCol = tokCol - 1; 
            GetCode();
            // Now ensure that line counting is correct.
            lNum = tokLin;
            // And count the rest of the text.
            for (int i = 0; i < n; i++) GetCode();
            MarkEnd();
        }
       
        //
        //  It would be nice to count backward in the text
        //  but it does not seem possible to re-establish
        //  the correct column counts except by going forward.
        //
        /// <summary>
        /// Removes the last "n" code points from the pattern.
        /// </summary>
        /// <param name="n">The number to remove</param>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        void _yytrunc(int n) { yyless(yyleng - n); }
        
        //
        // This is painful, but we no longer count
        // codepoints.  For the overwhelming majority 
        // of cases the single line code is fast, for
        // the others, well, at least it is all in the
        // buffer so no files are touched. Note that we
        // can't use (tokEPos - tokPos) because of the
        // possibility of surrogate pairs in the token.
        //
        /// <summary>
        /// The length of the pattern in codepoints (not the same as 
        /// string-length if the pattern contains any surrogate pairs).
        /// </summary>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly", MessageId = "yyleng")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "yyleng")]
        public int yyleng
        {
            get {
                if (tokELin == tokLin)
                    return tokECol - tokCol;
                else
#if BYTEMODE
                    return tokEPos - tokPos;
#else
                {
                    int ch;
                    int count = 0;
                    int save = buffer.Pos;
                    buffer.Pos = tokPos;
                    do {
                        ch = buffer.Read();
                        if (!char.IsHighSurrogate((char)ch)) count++;
                    } while (buffer.Pos < tokEPos && ch != ScanBuff.EndOfFile);
                    buffer.Pos = save;
                    return count;
                }
#endif // BYTEMODE
            }
        }
        
        // ============ methods available in actions ==============

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal int YY_START {
            get { return currentScOrd; }
            set { currentScOrd = value; 
                  currentStart = startState[value]; 
            } 
        }
        
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal void BEGIN(int next) {
            currentScOrd = next;
            currentStart = startState[next];
        }

        // ============== The main tokenizer code =================

        int Scan() {
                for (; ; ) {
                    int next;              // next state to enter
#if LEFTANCHORS
                    for (;;) {
                        // Discard characters that do not start any pattern.
                        // Must check the left anchor condition after *every* GetCode!
                        state = ((cCol == 0) ? anchorState[currentScOrd] : currentStart);
                        if ((next = NextState()) != goStart) break; // LOOP EXIT HERE...
                        GetCode();
                    }
                    
#else // !LEFTANCHORS
                    state = currentStart;
                    while ((next = NextState()) == goStart) {
                        // At this point, the current character has no
                        // transition from the current state.  We discard 
                        // the "no-match" char.   In traditional LEX such 
                        // characters are echoed to the console.
                        GetCode();
                    }
#endif // LEFTANCHORS                    
                    // At last, a valid transition ...    
                    MarkToken();
                    state = next;
                    GetCode();                    
#if BACKUP
                    bool contextSaved = false;
                    while ((next = NextState()) > eofNum) { // Exit for goStart AND for eofNum
                        if (state <= maxAccept && next > maxAccept) { // need to prepare backup data
                            // Store data for the *latest* accept state that was found.
                            SaveStateAndPos( ref ctx );
                            contextSaved = true;
                        }
                        state = next;
                        GetCode();
                    }
                    if (state > maxAccept && contextSaved)
                        RestoreStateAndPos( ref ctx );
#else  // BACKUP
                    while ((next = NextState()) > eofNum) { // Exit for goStart AND for eofNum
                         state = next;
                         GetCode();
                    }
#endif // BACKUP
                    if (state <= maxAccept) {
                        MarkEnd();
#region ActionSwitch
#pragma warning disable 162, 1522
    switch (state)
    {
        case eofNum:
            if (yywrap())
                return (int)Tokens.EOF;
            break;
        case 1: // Recognized '{Cmnt}',	Shortest string "'"
return (int)Tokens.comment;
            break;
        case 2: // Recognized '{Ident}',	Shortest string "S"
        case 3: // Recognized '{Ident}',	Shortest string "U"
        case 4: // Recognized '{Ident}',	Shortest string "B"
        case 5: // Recognized '{Ident}',	Shortest string "F"
        case 6: // Recognized '{Ident}',	Shortest string "N"
        case 7: // Recognized '{Ident}',	Shortest string "C"
        case 8: // Recognized '{Ident}',	Shortest string "T"
        case 9: // Recognized '{Ident}',	Shortest string "I"
        case 10: // Recognized '{Ident}',	Shortest string "O"
        case 11: // Recognized '{Ident}',	Shortest string "E"
        case 12: // Recognized '{Ident}',	Shortest string "D"
        case 13: // Recognized '{Ident}',	Shortest string "A"
        case 34: // Recognized '{Ident}',	Shortest string "R"
        case 35: // Recognized '{Ident}',	Shortest string "L"
        case 36: // Recognized '{Ident}',	Shortest string "V"
        case 38: // Recognized '{Ident}',	Shortest string "P"
        case 39: // Recognized '{Ident}',	Shortest string "H"
        case 40: // Recognized '{Ident}',	Shortest string "W"
        case 42: // Recognized '{Ident}',	Shortest string "G"
        case 46: // Recognized '{Ident}',	Shortest string "GE"
        case 47: // Recognized '{Ident}',	Shortest string "GET"
        case 48: // Recognized '{Ident}',	Shortest string "GETI"
        case 49: // Recognized '{Ident}',	Shortest string "GETL"
        case 50: // Recognized '{Ident}',	Shortest string "GETLA"
        case 51: // Recognized '{Ident}',	Shortest string "GETLAS"
        case 52: // Recognized '{Ident}',	Shortest string "GETLAST"
        case 53: // Recognized '{Ident}',	Shortest string "GETLASTR"
        case 54: // Recognized '{Ident}',	Shortest string "GETLASTRU"
        case 55: // Recognized '{Ident}',	Shortest string "GETLASTRUN"
        case 56: // Recognized '{Ident}',	Shortest string "GETLASTRUNC"
        case 57: // Recognized '{Ident}',	Shortest string "GETLASTRUNR"
        case 58: // Recognized '{Ident}',	Shortest string "GETLASTRUNRU"
        case 59: // Recognized '{Ident}',	Shortest string "GETLASTRUNRUN"
        case 60: // Recognized '{Ident}',	Shortest string "GETLASTRUNRUNT"
        case 61: // Recognized '{Ident}',	Shortest string "GETLASTRUNRUNTI"
        case 62: // Recognized '{Ident}',	Shortest string "GETLASTRUNCOMPIL"
        case 63: // Recognized '{Ident}',	Shortest string "GETLASTRUNCOMPILE"
        case 64: // Recognized '{Ident}',	Shortest string "GETLASTRUNCOMPILEE"
        case 65: // Recognized '{Ident}',	Shortest string "GETLASTRUNCOMPILEER"
        case 66: // Recognized '{Ident}',	Shortest string "GETLASTRUNCOMPILEERR"
        case 67: // Recognized '{Ident}',	Shortest string "SQ"
        case 69: // Recognized '{Ident}',	Shortest string "GETLASTRUNCO"
        case 70: // Recognized '{Ident}',	Shortest string "GETLASTRUNCOM"
        case 71: // Recognized '{Ident}',	Shortest string "GETLASTRUNCOMP"
        case 72: // Recognized '{Ident}',	Shortest string "GETLASTRUNCOMPI"
        case 73: // Recognized '{Ident}',	Shortest string "GETIN"
        case 74: // Recognized '{Ident}',	Shortest string "GETINT"
        case 75: // Recognized '{Ident}',	Shortest string "GETINTE"
        case 76: // Recognized '{Ident}',	Shortest string "GETINTER"
        case 77: // Recognized '{Ident}',	Shortest string "GETINTERF"
        case 78: // Recognized '{Ident}',	Shortest string "GETINTERFA"
        case 79: // Recognized '{Ident}',	Shortest string "TYP"
        case 80: // Recognized '{Ident}',	Shortest string "WA"
        case 81: // Recognized '{Ident}',	Shortest string "WR"
        case 82: // Recognized '{Ident}',	Shortest string "WH"
        case 83: // Recognized '{Ident}',	Shortest string "WHI"
        case 84: // Recognized '{Ident}',	Shortest string "WHIL"
        case 86: // Recognized '{Ident}',	Shortest string "WRI"
        case 87: // Recognized '{Ident}',	Shortest string "WRIT"
        case 88: // Recognized '{Ident}',	Shortest string "READ"
        case 89: // Recognized '{Ident}',	Shortest string "READA"
        case 90: // Recognized '{Ident}',	Shortest string "READAS"
        case 91: // Recognized '{Ident}',	Shortest string "READASC"
        case 92: // Recognized '{Ident}',	Shortest string "READASCI"
        case 93: // Recognized '{Ident}',	Shortest string "COPY"
        case 94: // Recognized '{Ident}',	Shortest string "COPYF"
        case 95: // Recognized '{Ident}',	Shortest string "COPYFI"
        case 96: // Recognized '{Ident}',	Shortest string "LEF"
        case 97: // Recognized '{Ident}',	Shortest string "PR"
        case 98: // Recognized '{Ident}',	Shortest string "PRI"
        case 99: // Recognized '{Ident}',	Shortest string "PRIN"
        case 101: // Recognized '{Ident}',	Shortest string "RN"
        case 102: // Recognized '{Ident}',	Shortest string "MA"
        case 103: // Recognized '{Ident}',	Shortest string "MAT"
        case 104: // Recognized '{Ident}',	Shortest string "MATC"
        case 105: // Recognized '{Ident}',	Shortest string "MATCH"
        case 106: // Recognized '{Ident}',	Shortest string "MATCHF"
        case 107: // Recognized '{Ident}',	Shortest string "MATCHFI"
        case 108: // Recognized '{Ident}',	Shortest string "MATCHFIL"
        case 109: // Recognized '{Ident}',	Shortest string "AB"
        case 110: // Recognized '{Ident}',	Shortest string "VO"
        case 111: // Recognized '{Ident}',	Shortest string "VA"
        case 112: // Recognized '{Ident}',	Shortest string "VOI"
        case 114: // Recognized '{Ident}',	Shortest string "UC"
        case 115: // Recognized '{Ident}',	Shortest string "LI"
        case 116: // Recognized '{Ident}',	Shortest string "LO"
        case 117: // Recognized '{Ident}',	Shortest string "LE"
        case 118: // Recognized '{Ident}',	Shortest string "LIS"
        case 119: // Recognized '{Ident}',	Shortest string "LIST"
        case 120: // Recognized '{Ident}',	Shortest string "LISTD"
        case 121: // Recognized '{Ident}',	Shortest string "UCA"
        case 122: // Recognized '{Ident}',	Shortest string "SI"
        case 123: // Recognized '{Ident}',	Shortest string "RI"
        case 124: // Recognized '{Ident}',	Shortest string "RE"
        case 125: // Recognized '{Ident}',	Shortest string "REB"
        case 126: // Recognized '{Ident}',	Shortest string "RET"
        case 127: // Recognized '{Ident}',	Shortest string "REA"
        case 128: // Recognized '{Ident}',	Shortest string "RETU"
        case 129: // Recognized '{Ident}',	Shortest string "RETUR"
        case 131: // Recognized '{Ident}',	Shortest string "REBO"
        case 132: // Recognized '{Ident}',	Shortest string "REBOO"
        case 133: // Recognized '{Ident}',	Shortest string "REBOOT"
        case 134: // Recognized '{Ident}',	Shortest string "REBOOTS"
        case 135: // Recognized '{Ident}',	Shortest string "REBOOTSY"
        case 136: // Recognized '{Ident}',	Shortest string "REBOOTSYS"
        case 137: // Recognized '{Ident}',	Shortest string "REBOOTSYST"
        case 138: // Recognized '{Ident}',	Shortest string "REBOOTSYSTE"
        case 139: // Recognized '{Ident}',	Shortest string "RIG"
        case 144: // Recognized '{Ident}',	Shortest string "DO"
        case 145: // Recognized '{Ident}',	Shortest string "DE"
        case 146: // Recognized '{Ident}',	Shortest string "DEL"
        case 147: // Recognized '{Ident}',	Shortest string "DELE"
        case 148: // Recognized '{Ident}',	Shortest string "DELET"
        case 149: // Recognized '{Ident}',	Shortest string "DELETE"
        case 150: // Recognized '{Ident}',	Shortest string "CREATED"
        case 151: // Recognized '{Ident}',	Shortest string "CREATEDI"
        case 152: // Recognized '{Ident}',	Shortest string "CREATEDIR"
        case 153: // Recognized '{Ident}',	Shortest string "CREATEDIRE"
        case 154: // Recognized '{Ident}',	Shortest string "CREATEDIREC"
        case 155: // Recognized '{Ident}',	Shortest string "CREATEDIRECT"
        case 156: // Recognized '{Ident}',	Shortest string "CREATEDIRECTO"
        case 157: // Recognized '{Ident}',	Shortest string "CREATEDIRECTOR"
        case 158: // Recognized '{Ident}',	Shortest string "DOU"
        case 159: // Recognized '{Ident}',	Shortest string "DOUB"
        case 160: // Recognized '{Ident}',	Shortest string "DOUBL"
        case 161: // Recognized '{Ident}',	Shortest string "EN"
        case 162: // Recognized '{Ident}',	Shortest string "EA"
        case 163: // Recognized '{Ident}',	Shortest string "EL"
        case 164: // Recognized '{Ident}',	Shortest string "EX"
        case 165: // Recognized '{Ident}',	Shortest string "ELS"
        case 167: // Recognized '{Ident}',	Shortest string "EAC"
        case 170: // Recognized '{Ident}',	Shortest string "OB"
        case 171: // Recognized '{Ident}',	Shortest string "OBJ"
        case 172: // Recognized '{Ident}',	Shortest string "OBJE"
        case 173: // Recognized '{Ident}',	Shortest string "FLOA"
        case 176: // Recognized '{Ident}',	Shortest string "INS"
        case 178: // Recognized '{Ident}',	Shortest string "INV"
        case 179: // Recognized '{Ident}',	Shortest string "INVA"
        case 180: // Recognized '{Ident}',	Shortest string "INVAL"
        case 181: // Recognized '{Ident}',	Shortest string "INVALI"
        case 183: // Recognized '{Ident}',	Shortest string "INTE"
        case 184: // Recognized '{Ident}',	Shortest string "INTER"
        case 185: // Recognized '{Ident}',	Shortest string "INTEG"
        case 186: // Recognized '{Ident}',	Shortest string "INTEGE"
        case 187: // Recognized '{Ident}',	Shortest string "INTERF"
        case 188: // Recognized '{Ident}',	Shortest string "INTERFA"
        case 190: // Recognized '{Ident}',	Shortest string "TR"
        case 191: // Recognized '{Ident}',	Shortest string "TY"
        case 192: // Recognized '{Ident}',	Shortest string "TRU"
        case 194: // Recognized '{Ident}',	Shortest string "CS"
        case 195: // Recognized '{Ident}',	Shortest string "CO"
        case 196: // Recognized '{Ident}',	Shortest string "CD"
        case 197: // Recognized '{Ident}',	Shortest string "CR"
        case 198: // Recognized '{Ident}',	Shortest string "CRE"
        case 199: // Recognized '{Ident}',	Shortest string "CREA"
        case 200: // Recognized '{Ident}',	Shortest string "CREAT"
        case 201: // Recognized '{Ident}',	Shortest string "CREATE"
        case 202: // Recognized '{Ident}',	Shortest string "CREATEO"
        case 203: // Recognized '{Ident}',	Shortest string "CREATEOB"
        case 204: // Recognized '{Ident}',	Shortest string "CREATEOBJ"
        case 205: // Recognized '{Ident}',	Shortest string "CREATEOBJE"
        case 206: // Recognized '{Ident}',	Shortest string "COP"
        case 207: // Recognized '{Ident}',	Shortest string "NO"
        case 209: // Recognized '{Ident}',	Shortest string "FU"
        case 210: // Recognized '{Ident}',	Shortest string "FI"
        case 211: // Recognized '{Ident}',	Shortest string "FO"
        case 212: // Recognized '{Ident}',	Shortest string "FA"
        case 213: // Recognized '{Ident}',	Shortest string "FL"
        case 214: // Recognized '{Ident}',	Shortest string "FLO"
        case 215: // Recognized '{Ident}',	Shortest string "FAL"
        case 216: // Recognized '{Ident}',	Shortest string "FALS"
        case 219: // Recognized '{Ident}',	Shortest string "FORM"
        case 220: // Recognized '{Ident}',	Shortest string "FORMA"
        case 221: // Recognized '{Ident}',	Shortest string "FORMAT"
        case 222: // Recognized '{Ident}',	Shortest string "FORMATD"
        case 223: // Recognized '{Ident}',	Shortest string "FORMATDR"
        case 224: // Recognized '{Ident}',	Shortest string "FORMATDRI"
        case 225: // Recognized '{Ident}',	Shortest string "FUN"
        case 226: // Recognized '{Ident}',	Shortest string "FUNC"
        case 227: // Recognized '{Ident}',	Shortest string "FUNCT"
        case 228: // Recognized '{Ident}',	Shortest string "FUNCTI"
        case 229: // Recognized '{Ident}',	Shortest string "FUNCTIO"
        case 231: // Recognized '{Ident}',	Shortest string "BO"
        case 232: // Recognized '{Ident}',	Shortest string "BR"
        case 233: // Recognized '{Ident}',	Shortest string "BRS"
        case 234: // Recognized '{Ident}',	Shortest string "BRSU"
        case 235: // Recognized '{Ident}',	Shortest string "BOO"
        case 236: // Recognized '{Ident}',	Shortest string "BOOL"
        case 237: // Recognized '{Ident}',	Shortest string "BOOLE"
        case 238: // Recognized '{Ident}',	Shortest string "BOOLEA"
        case 239: // Recognized '{Ident}',	Shortest string "UP"
        case 240: // Recognized '{Ident}',	Shortest string "UPT"
        case 241: // Recognized '{Ident}',	Shortest string "UPTI"
        case 242: // Recognized '{Ident}',	Shortest string "SU"
        case 243: // Recognized '{Ident}',	Shortest string "ST"
        case 244: // Recognized '{Ident}',	Shortest string "SL"
        case 245: // Recognized '{Ident}',	Shortest string "SLE"
        case 246: // Recognized '{Ident}',	Shortest string "STO"
        case 247: // Recognized '{Ident}',	Shortest string "STE"
        case 250: // Recognized '{Ident}',	Shortest string "STRIN"
return (int)Tokens.bsIdent;
            break;
        case 14: // Recognized '{bar}',	Shortest string "|"
return (int)Tokens.bar;
            break;
        case 15: // Recognized '{dot}',	Shortest string "."
return (int)Tokens.dot;
            break;
        case 16: // Recognized '{semi}',	Shortest string ";"
return (int)Tokens.semi;
            break;
        case 17: // Recognized '{colon}',	Shortest string ":"
return (int)Tokens.colon;
            break;
        case 18: // Recognized '{star}',	Shortest string "*"
return (int)Tokens.star;
            break;
        case 19: // Recognized '{lt}',	Shortest string "<"
return (int)Tokens.lt;
            break;
        case 20: // Recognized '{gt}',	Shortest string ">"
return (int)Tokens.gt;
            break;
        case 21: // Recognized '{equal}',	Shortest string "="
return (int)Tokens.equal;
            break;
        case 22: // Recognized '{comma}',	Shortest string ","
return (int)Tokens.comma;
            break;
        case 23: // Recognized '{slash}',	Shortest string "/"
return (int)Tokens.slash;
            break;
        case 24: // Recognized '{lBrac}',	Shortest string "["
return (int)Tokens.lBrac;
            break;
        case 25: // Recognized '{rBrac}',	Shortest string "]"
return (int)Tokens.rBrac;
            break;
        case 26: // Recognized '{lPar}',	Shortest string "("
return (int)Tokens.lPar;
            break;
        case 27: // Recognized '{rPar}',	Shortest string ")"
return (int)Tokens.rPar;
            break;
        case 28: // Recognized '{lBrace}',	Shortest string "{"
return (int)Tokens.lBrace;
            break;
        case 29: // Recognized '{rBrace}',	Shortest string "}"
return (int)Tokens.rBrace;
            break;
        case 30: // Recognized '{Eol}',	Shortest string "\r"
        case 31: // Recognized '{Eol}',	Shortest string "\n"
return (int)Tokens.Eol;
            break;
        case 32: // Recognized '{plus}',	Shortest string "+"
return (int)Tokens.plus;
            break;
        case 33: // Recognized '{minus}',	Shortest string "-"
return (int)Tokens.minus;
            break;
        case 37: // Recognized '{bsM}',	Shortest string "M"
return (int)Tokens.bsM;
            break;
        case 41: // Recognized '{questionMark}',	Shortest string "?"
return (int)Tokens.questionMark;
            break;
        case 43: // Recognized '{Number}',	Shortest string "0"
        case 44: // Recognized '{Number}',	Shortest string ".0"
return (int)Tokens.bsNumber;
            break;
        case 45: // Recognized '{Str}',	Shortest string "\"\""
return (int)Tokens.bsStr;
            break;
        case 68: // Recognized '{Funcs}',	Shortest string "SIN"
        case 177: // Recognized '{Funcs}',	Shortest string "INT"
        case 248: // Recognized '{Funcs}',	Shortest string "STR"
        case 249: // Recognized '{Funcs}',	Shortest string "STRI"
return (int)Tokens.bsFuncs;
            break;
        case 85: // Recognized '{bsWhile}',	Shortest string "WHILE"
return (int)Tokens.bsWhile;
            break;
        case 100: // Recognized '{print}',	Shortest string "PRINT"
return (int)Tokens.bsPrint;
            break;
        case 113: // Recognized '{Typs}',	Shortest string "VOID"
        case 251: // Recognized '{Typs}',	Shortest string "STRING"
return (int)Tokens.bsType;
            break;
        case 130: // Recognized '{bsReturn}',	Shortest string "RETURN"
return (int)Tokens.bsReturn;
            break;
        case 140: // Recognized '{gtEqual}',	Shortest string ">="
return (int)Tokens.gtEqual;
            break;
        case 141: // Recognized '{notEqual}',	Shortest string "<>"
return (int)Tokens.notEqual;
            break;
        case 142: // Recognized '{ltEqual}',	Shortest string "<="
return (int)Tokens.ltEqual;
            break;
        case 143: // Recognized 'AS',	Shortest string "AS"
return (int)Tokens.bsAs;
            break;
        case 166: // Recognized '{bsElse}',	Shortest string "ELSE"
return (int)Tokens.bsElse;
            break;
        case 168: // Recognized '{bsEach}',	Shortest string "EACH"
return (int)Tokens.bsEach;
            break;
        case 169: // Recognized 'END',	Shortest string "END"
return (int)Tokens.bsEnd;
            break;
        case 174: // Recognized '{bsIf}',	Shortest string "IF"
return (int)Tokens.bsIf;
            break;
        case 175: // Recognized '{bsIn}',	Shortest string "IN"
return (int)Tokens.bsIn;
            break;
        case 182: // Recognized '{bsInvalid}',	Shortest string "INVALID"
return (int)Tokens.bsInvalid;
            break;
        case 189: // Recognized '{bsTo}',	Shortest string "TO"
return (int)Tokens.bsTo;
            break;
        case 193: // Recognized '{bsTrue}',	Shortest string "TRUE"
return (int)Tokens.bsTrue;
            break;
        case 208: // Recognized '{bsNot}',	Shortest string "NOT"
return (int)Tokens.bsNot;
            break;
        case 217: // Recognized '{bsFalse}',	Shortest string "FALSE"
return (int)Tokens.bsFalse;
            break;
        case 218: // Recognized '{bsFor}',	Shortest string "FOR"
return (int)Tokens.bsFor;
            break;
        case 230: // Recognized 'FUNCTION',	Shortest string "FUNCTION"
return (int)Tokens.bsFunction;
            break;
        case 252: // Recognized '{bsStep}',	Shortest string "STEP"
return (int)Tokens.bsStep;
            break;
        case 253: // Recognized '{bsStop}',	Shortest string "STOP"
return (int)Tokens.bsStop;
            break;
        case 254: // Recognized 'SUB',	Shortest string "SUB"
return (int)Tokens.bsSub;
            break;
        default:
            break;
    }
#pragma warning restore 162, 1522
#endregion
                    }
                }
        }

#if BACKUP
        void SaveStateAndPos(ref Context ctx) {
            ctx.bPos  = buffer.Pos;
            ctx.rPos  = readPos;
            ctx.cCol  = cCol;
            ctx.lNum  = lNum;
            ctx.state = state;
            ctx.cChr  = code;
        }

        void RestoreStateAndPos(ref Context ctx) {
            buffer.Pos = ctx.bPos;
            readPos = ctx.rPos;
            cCol  = ctx.cCol;
            lNum  = ctx.lNum;
            state = ctx.state;
            code  = ctx.cChr;
        }
#endif  // BACKUP

        // ============= End of the tokenizer code ================

#if STACK        
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal void yy_clear_stack() { scStack.Clear(); }
        
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal int yy_top_state() { return scStack.Peek(); }
        
        internal void yy_push_state(int state)
        {
            scStack.Push(currentScOrd);
            BEGIN(state);
        }
        
        internal void yy_pop_state()
        {
            // Protect against input errors that pop too far ...
            if (scStack.Count > 0) {
				int newSc = scStack.Pop();
				BEGIN(newSc);
            } // Otherwise leave stack unchanged.
        }
 #endif // STACK

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal void ECHO() { Console.Out.Write(yytext); }
        
    } // end class $Scanner


} // end namespace
