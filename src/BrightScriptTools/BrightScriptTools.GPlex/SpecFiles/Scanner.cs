//
//  This CSharp output file generated by Gardens Point LEX
//  Gardens Point LEX (GPLEX) is Copyright (c) John Gough, QUT 2006-2014.
//  Output produced by GPLEX is the property of the user.
//  See accompanying file GPLEXcopyright.rtf.
//
//  GPLEX Version:  1.0.0.0
//  Machine:  OSTLT0248323
//  DateTime: 17/03/2016 23:54:47
//  UserName: CFE05
//  GPLEX input file <SpecFiles\BrightScript.lex - 17/03/2016 23:54:25>
//  GPLEX frame file <embedded resource>
//
//  Option settings: unicode, verbose, parser, stack, minimize
//  Option settings: classes, compressMap, compressNext, persistBuffer, noEmbedBuffers
//  Fallback code page: Target machine default
//

//
// Revised backup code
// Version 1.2.1 of 24-June-2013
//
//
#define STACK
#define BABEL
#define PERSIST

using System;
using System.IO;
using System.Text;
using System.Globalization;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Diagnostics.CodeAnalysis;

using BrightScriptTools.GPlex;
using System.Collections;
using BrightScriptTools.GPlex.Parser;

namespace BrightScriptTools.Compiler
{   
    /// <summary>
    /// Summary Canonical example of GPLEX automaton
    /// </summary>
    
#if STANDALONE
    //
    // These are the dummy declarations for stand-alone GPLEX applications
    // normally these declarations would come from the parser.
    // If you declare /noparser, or %option noparser then you get this.
    //

     public enum Tokens
    { 
      EOF = 0, maxParseToken = int.MaxValue 
      // must have at least these two, values are almost arbitrary
    }

     public abstract class ScanBase
    {
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly", MessageId = "yylex")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "yylex")]
        public abstract int yylex();

        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly", MessageId = "yywrap")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "yywrap")]
        protected virtual bool yywrap() { return true; }

#if BABEL
        protected abstract int CurrentSc { get; set; }
        // EolState is the 32-bit of state data persisted at 
        // the end of each line for Visual Studio colorization.  
        // The default is to return CurrentSc.  You must override
        // this if you want more complicated behavior.
        public virtual int EolState { 
            get { return CurrentSc; }
            set { CurrentSc = value; } 
        }
    }
    
     public interface IColorScan
    {
        void SetSource(string source, int offset);
        int GetNext(ref int state, out int start, out int end);
#endif // BABEL
    }

#endif // STANDALONE
    
    // If the compiler can't find the scanner base class maybe you
    // need to run GPPG with the /gplex option, or GPLEX with /noparser
#if BABEL
     public sealed partial class Scanner : ScanBase, IColorScan
    {
        private ScanBuff buffer;
        int currentScOrd;  // start condition ordinal
        
        protected override int CurrentSc 
        {
             // The current start state is a property
             // to try to avoid the user error of setting
             // scState but forgetting to update the FSA
             // start state "currentStart"
             //
             get { return currentScOrd; }  // i.e. return YY_START;
             set { currentScOrd = value;   // i.e. BEGIN(value);
                   currentStart = startState[value]; }
        }
#else  // BABEL
     public sealed partial class Scanner : ScanBase
    {
        private ScanBuff buffer;
        int currentScOrd;  // start condition ordinal
#endif // BABEL
        
        /// <summary>
        /// The input buffer for this scanner.
        /// </summary>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        public ScanBuff Buffer { get { return buffer; } }
        
        private static int GetMaxParseToken() {
     System.Reflection.FieldInfo f = typeof(Tokens).GetField("maxParseToken");
            return (f == null ? int.MaxValue : (int)f.GetValue(null));
        }
        
        static int parserMax = GetMaxParseToken();
        
        enum Result {accept, noMatch, contextFound};

        const int maxAccept = 86;
        const int initial = 87;
        const int eofNum = 0;
        const int goStart = -1;
        const int INITIAL = 0;

#region user code
#endregion user code

        int state;
        int currentStart = startState[0];
        int code;      // last code read
        int cCol;      // column number of code
        int lNum;      // current line number
        //
        // The following instance variables are used, among other
        // things, for constructing the yylloc location objects.
        //
        int tokPos;        // buffer position at start of token
        int tokCol;        // zero-based column number at start of token
        int tokLin;        // line number at start of token
        int tokEPos;       // buffer position at end of token
        int tokECol;       // column number at end of token
        int tokELin;       // line number at end of token
        string tokTxt;     // lazily constructed text of token
#if STACK          
        private Stack<int> scStack = new Stack<int>();
#endif // STACK

#region ScannerTables
    struct Table {
        public int min; public int rng; public int dflt;
        public sbyte[] nxt;
        public Table(int m, int x, int d, sbyte[] n) {
            min = m; rng = x; dflt = d; nxt = n;
        }
    };

    static int[] startState = new int[] {87, 0};

#region CompressedCharacterMap
    //
    // There are 27 equivalence classes
    // There are 2 character sequence regions
    // There are 1 tables, 123 entries
    // There are 1 runs, 0 singletons
    // Decision tree depth is 1
    //
    static sbyte[] mapC0 = new sbyte[123] {
/*     '\0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/*   '\x10' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/*   '\x20' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/*      '0' */ 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 0, 0, 0, 0, 0, 0, 
/*      '@' */ 0, 1, 12, 7, 3, 9, 16, 20, 14, 5, 13, 25, 15, 6, 2, 11, 
/*      'P' */ 23, 25, 8, 4, 10, 17, 21, 18, 19, 24, 25, 0, 0, 0, 0, 22, 
/*      '`' */ 0, 1, 12, 7, 3, 9, 16, 20, 14, 5, 13, 25, 15, 6, 2, 11, 
/*      'p' */ 23, 25, 8, 4, 10, 17, 21, 18, 19, 24, 25 };

    static sbyte MapC(int code)
    { // '\0' <= code <= '\U0010FFFF'
      if (code < 123) // '\0' <= code <= 'z'
        return mapC0[code - 0];
      else // '{' <= code <= '\U0010FFFF'
        return (sbyte)0;
    }
#endregion

    static Table[] NxS = new Table[88] {
/* NxS[   0] */ new Table(0, 0, 0, null), // Shortest string ""
/* NxS[   1] */ // Shortest string "A"
      new Table(0, 5, 12, new sbyte[] {-1, 12, 25, 12, 6}),
/* NxS[   2] */ // Shortest string "N"
      new Table(0, 12, 12, new sbyte[] {-1, 12, 12, 12, 12, 12, 
          12, 12, 12, 86, 12, 23}),
/* NxS[   3] */ // Shortest string "D"
      new Table(0, 6, 12, new sbyte[] {-1, 12, 12, 12, 12, 45}),
/* NxS[   4] */ // Shortest string "S"
      new Table(10, 18, 12, new sbyte[] {81, 12, 12, 12, 12, 12, 
          12, 50, 12, 12, 12, 12, 12, 12, 12, 12, 12, -1}),
/* NxS[   5] */ // Shortest string "I"
      new Table(16, 14, 12, new sbyte[] {6, 12, 12, 12, 12, 12, 
          12, 12, 12, 12, 12, -1, 12, 75}),
/* NxS[   6] */ // Shortest string "M"
      new Table(0, 1, 12, new sbyte[] {-1}),
/* NxS[   7] */ // Shortest string "C"
      new Table(0, 9, 12, new sbyte[] {-1, 12, 12, 12, 12, 12, 
          12, 12, 67}),
/* NxS[   8] */ // Shortest string "R"
      new Table(0, 10, 12, new sbyte[] {-1, 12, 25, 12, 12, 12, 
          12, 12, 12, 64}),
/* NxS[   9] */ // Shortest string "E"
      new Table(15, 15, 12, new sbyte[] {39, 12, 12, 12, 56, 12, 
          12, 12, 12, 12, 12, 12, -1, 54, 55}),
/* NxS[  10] */ // Shortest string "T"
      new Table(24, 18, 12, new sbyte[] {53, 12, 12, -1, 50, 12, 
          12, 12, 12, 12, 12, 51, 12, 12, 6, 12, 12, 52}),
/* NxS[  11] */ // Shortest string "O"
      new Table(0, 13, 12, new sbyte[] {-1, 12, 12, 12, 12, 12, 
          12, 12, 6, 12, 12, 12, 46}),
/* NxS[  12] */ // Shortest string "B"
      new Table(0, 1, 12, new sbyte[] {-1}),
/* NxS[  13] */ // Shortest string "L"
      new Table(0, 6, 12, new sbyte[] {-1, 12, 12, 12, 12, 40}),
/* NxS[  14] */ // Shortest string "F"
      new Table(11, 18, 12, new sbyte[] {32, 12, 12, 12, 12, 12, 
          33, 12, 12, 12, 12, 12, 12, 12, 12, 12, -1, 31}),
/* NxS[  15] */ // Shortest string "W"
      new Table(14, 14, 12, new sbyte[] {28, 12, 12, 12, 12, 12, 
          12, 12, 12, 12, 12, 12, 12, -1}),
/* NxS[  16] */ // Shortest string "G"
      new Table(0, 12, 12, new sbyte[] {-1, 12, 12, 12, 12, 12, 
          12, 12, 12, 12, 12, 26}),
/* NxS[  17] */ // Shortest string "V"
      new Table(0, 12, 12, new sbyte[] {-1, 12, 12, 12, 12, 12, 
          12, 12, 12, 12, 12, 24}),
/* NxS[  18] */ // Shortest string "P"
      new Table(0, 12, 12, new sbyte[] {-1, 12, 12, 12, 12, 12, 
          12, 12, 20, 12, 12, 21}),
/* NxS[  19] */ // Shortest string "0"
      new Table(26, 1, -1, new sbyte[] {19}),
/* NxS[  20] */ // Shortest string "PR"
      new Table(0, 6, 12, new sbyte[] {-1, 12, 12, 12, 12, 22}),
/* NxS[  21] */ // Shortest string "PO"
      new Table(0, 5, 12, new sbyte[] {-1, 12, 12, 12, 6}),
/* NxS[  22] */ // Shortest string "PRI"
      new Table(0, 3, 12, new sbyte[] {-1, 12, 23}),
/* NxS[  23] */ // Shortest string "NO"
      new Table(0, 11, 12, new sbyte[] {-1, 12, 12, 12, 12, 12, 
          12, 12, 12, 12, 6}),
/* NxS[  24] */ // Shortest string "VO"
      new Table(0, 6, 12, new sbyte[] {-1, 12, 12, 12, 12, 25}),
/* NxS[  25] */ // Shortest string "AN"
      new Table(0, 4, 12, new sbyte[] {-1, 12, 12, 6}),
/* NxS[  26] */ // Shortest string "GO"
      new Table(0, 11, 12, new sbyte[] {-1, 12, 12, 12, 12, 12, 
          12, 12, 12, 12, 27}),
/* NxS[  27] */ // Shortest string "GOT"
      new Table(0, 12, 12, new sbyte[] {-1, 12, 12, 12, 12, 12, 
          12, 12, 12, 12, 12, 6}),
/* NxS[  28] */ // Shortest string "WH"
      new Table(0, 6, 12, new sbyte[] {-1, 12, 12, 12, 12, 29}),
/* NxS[  29] */ // Shortest string "WHI"
      new Table(15, 13, 12, new sbyte[] {30, 12, 12, 12, 12, 12, 
          12, 12, 12, 12, 12, 12, -1}),
/* NxS[  30] */ // Shortest string "ELS"
      new Table(0, 10, 12, new sbyte[] {-1, 12, 12, 12, 12, 12, 
          12, 12, 12, 6}),
/* NxS[  31] */ // Shortest string "FA"
      new Table(15, 13, 12, new sbyte[] {39, 12, 12, 12, 12, 12, 
          12, 12, 12, 12, 12, 12, -1}),
/* NxS[  32] */ // Shortest string "FO"
      new Table(0, 9, 12, new sbyte[] {-1, 12, 12, 12, 12, 12, 
          12, 12, 6}),
/* NxS[  33] */ // Shortest string "FU"
      new Table(0, 3, 12, new sbyte[] {-1, 12, 34}),
/* NxS[  34] */ // Shortest string "FUN"
      new Table(0, 8, 12, new sbyte[] {-1, 12, 12, 12, 12, 12, 
          12, 35}),
/* NxS[  35] */ // Shortest string "FUNC"
      new Table(0, 11, 12, new sbyte[] {-1, 12, 12, 12, 12, 12, 
          12, 12, 12, 12, 36}),
/* NxS[  36] */ // Shortest string "FUNCT"
      new Table(0, 6, 12, new sbyte[] {-1, 12, 12, 12, 12, 37}),
/* NxS[  37] */ // Shortest string "FUNCTI"
      new Table(0, 12, 12, new sbyte[] {-1, 12, 12, 12, 12, 12, 
          12, 12, 12, 12, 12, 38}),
/* NxS[  38] */ // Shortest string "THE"
      new Table(0, 3, 12, new sbyte[] {-1, 12, 6}),
/* NxS[  39] */ // Shortest string "EL"
      new Table(0, 5, 12, new sbyte[] {-1, 12, 12, 12, 30}),
/* NxS[  40] */ // Shortest string "LI"
      new Table(0, 3, 12, new sbyte[] {-1, 12, 41}),
/* NxS[  41] */ // Shortest string "LIN"
      new Table(0, 10, 12, new sbyte[] {-1, 12, 12, 12, 12, 12, 
          12, 12, 12, 42}),
/* NxS[  42] */ // Shortest string "LINE"
      new Table(22, 6, 12, new sbyte[] {43, 12, 12, 12, 12, -1}),
/* NxS[  43] */ // Shortest string "LINE_"
      new Table(0, 3, 12, new sbyte[] {-1, 12, 44}),
/* NxS[  44] */ // Shortest string "LINE_N"
      new Table(17, 11, 12, new sbyte[] {45, 12, 12, 12, 12, 12, 
          12, 12, 12, 12, -1}),
/* NxS[  45] */ // Shortest string "DI"
      new Table(0, 7, 12, new sbyte[] {-1, 12, 12, 12, 12, 12, 
          6}),
/* NxS[  46] */ // Shortest string "OB"
      new Table(0, 14, 12, new sbyte[] {-1, 12, 12, 12, 12, 12, 
          12, 12, 12, 12, 12, 12, 12, 47}),
/* NxS[  47] */ // Shortest string "OBJ"
      new Table(0, 17, 12, new sbyte[] {-1, 12, 12, 12, 12, 12, 
          12, 12, 12, 48, 12, 12, 12, 12, 12, 12, 49}),
/* NxS[  48] */ // Shortest string "OBJE"
      new Table(0, 8, 12, new sbyte[] {-1, 12, 12, 12, 12, 12, 
          12, 23}),
/* NxS[  49] */ // Shortest string "OBJF"
      new Table(17, 11, 12, new sbyte[] {38, 12, 12, 12, 12, 12, 
          12, 12, 12, 12, -1}),
/* NxS[  50] */ // Shortest string "SU"
      new Table(0, 13, 12, new sbyte[] {-1, 12, 12, 12, 12, 12, 
          12, 12, 12, 12, 12, 12, 6}),
/* NxS[  51] */ // Shortest string "TR"
      new Table(17, 11, 12, new sbyte[] {30, 12, 12, 12, 12, 12, 
          12, 12, 12, 12, -1}),
/* NxS[  52] */ // Shortest string "TH"
      new Table(0, 10, 12, new sbyte[] {-1, 12, 12, 12, 12, 12, 
          12, 12, 12, 38}),
/* NxS[  53] */ // Shortest string "TY"
      new Table(23, 5, 12, new sbyte[] {30, 12, 12, 12, -1}),
/* NxS[  54] */ // Shortest string "EA"
      new Table(0, 8, 12, new sbyte[] {-1, 12, 12, 12, 12, 12, 
          12, 63}),
/* NxS[  55] */ // Shortest string "EN"
      new Table(0, 4, 12, new sbyte[] {-1, 12, 12, 59}),
/* NxS[  56] */ // Shortest string "EX"
      new Table(0, 6, 12, new sbyte[] {-1, 12, 12, 12, 12, 57}),
/* NxS[  57] */ // Shortest string "EXI"
      new Table(0, 11, 12, new sbyte[] {-1, 12, 12, 12, 12, 12, 
          12, 12, 12, 12, 58}),
/* NxS[  58] */ // Shortest string "EXIT"
      new Table(18, 10, 12, new sbyte[] {15, 12, 12, 12, 12, 12, 
          12, 12, 12, -1}),
/* NxS[  59] */ // Shortest string "END"
      new Table(16, 17, 12, new sbyte[] {62, 12, 15, 12, 12, 12, 
          12, 12, 12, 12, 12, -1, 12, 12, 12, 60, 61}),
/* NxS[  60] */ // Shortest string "ENDS"
      new Table(17, 11, 12, new sbyte[] {50, 12, 12, 12, 12, 12, 
          12, 12, 12, 12, -1}),
/* NxS[  61] */ // Shortest string "ENDI"
      new Table(16, 12, 12, new sbyte[] {6, 12, 12, 12, 12, 12, 
          12, 12, 12, 12, 12, -1}),
/* NxS[  62] */ // Shortest string "ENDF"
      new Table(11, 17, 12, new sbyte[] {32, 12, 12, 12, 12, 12, 
          33, 12, 12, 12, 12, 12, 12, 12, 12, 12, -1}),
/* NxS[  63] */ // Shortest string "EAC"
      new Table(14, 14, 12, new sbyte[] {6, 12, 12, 12, 12, 12, 
          12, 12, 12, 12, 12, 12, 12, -1}),
/* NxS[  64] */ // Shortest string "RE"
      new Table(0, 11, 12, new sbyte[] {-1, 12, 12, 12, 12, 12, 
          6, 12, 12, 12, 65}),
/* NxS[  65] */ // Shortest string "RET"
      new Table(17, 11, 12, new sbyte[] {66, 12, 12, 12, 12, 12, 
          12, 12, 12, 12, -1}),
/* NxS[  66] */ // Shortest string "RETU"
      new Table(0, 9, 12, new sbyte[] {-1, 12, 12, 12, 12, 12, 
          12, 12, 38}),
/* NxS[  67] */ // Shortest string "CR"
      new Table(0, 10, 12, new sbyte[] {-1, 12, 12, 12, 12, 12, 
          12, 12, 12, 68}),
/* NxS[  68] */ // Shortest string "CRE"
      new Table(0, 2, 12, new sbyte[] {-1, 69}),
/* NxS[  69] */ // Shortest string "CREA"
      new Table(0, 11, 12, new sbyte[] {-1, 12, 12, 12, 12, 12, 
          12, 12, 12, 12, 70}),
/* NxS[  70] */ // Shortest string "CREAT"
      new Table(0, 10, 12, new sbyte[] {-1, 12, 12, 12, 12, 12, 
          12, 12, 12, 71}),
/* NxS[  71] */ // Shortest string "CREATE"
      new Table(0, 12, 12, new sbyte[] {-1, 12, 12, 12, 12, 12, 
          12, 12, 12, 12, 12, 72}),
/* NxS[  72] */ // Shortest string "CREATEO"
      new Table(0, 13, 12, new sbyte[] {-1, 12, 12, 12, 12, 12, 
          12, 12, 12, 12, 12, 12, 73}),
/* NxS[  73] */ // Shortest string "CREATEOB"
      new Table(0, 14, 12, new sbyte[] {-1, 12, 12, 12, 12, 12, 
          12, 12, 12, 12, 12, 12, 12, 74}),
/* NxS[  74] */ // Shortest string "CREATEOBJ"
      new Table(0, 10, 12, new sbyte[] {-1, 12, 12, 12, 12, 12, 
          12, 12, 12, 48}),
/* NxS[  75] */ // Shortest string "IN"
      new Table(21, 17, 12, new sbyte[] {77, 12, 12, 12, 12, 12, 
          -1, 12, 12, 12, 12, 12, 12, 12, 12, 12, 76}),
/* NxS[  76] */ // Shortest string "INT"
      new Table(0, 10, 12, new sbyte[] {-1, 12, 12, 12, 12, 12, 
          12, 12, 12, 79}),
/* NxS[  77] */ // Shortest string "INV"
      new Table(0, 2, 12, new sbyte[] {-1, 78}),
/* NxS[  78] */ // Shortest string "INVA"
      new Table(15, 13, 12, new sbyte[] {24, 12, 12, 12, 12, 12, 
          12, 12, 12, 12, 12, 12, -1}),
/* NxS[  79] */ // Shortest string "INTE"
      new Table(20, 8, 12, new sbyte[] {80, 12, 12, 12, 12, 12, 
          12, -1}),
/* NxS[  80] */ // Shortest string "INTEG"
      new Table(0, 10, 12, new sbyte[] {-1, 12, 12, 12, 12, 12, 
          12, 12, 12, 32}),
/* NxS[  81] */ // Shortest string "ST"
      new Table(0, 12, 12, new sbyte[] {-1, 12, 12, 12, 12, 12, 
          12, 12, 82, 83, 12, 83}),
/* NxS[  82] */ // Shortest string "STR"
      new Table(0, 6, 12, new sbyte[] {-1, 12, 12, 12, 12, 84}),
/* NxS[  83] */ // Shortest string "STE"
      new Table(23, 5, 12, new sbyte[] {6, 12, 12, 12, -1}),
/* NxS[  84] */ // Shortest string "STRI"
      new Table(0, 3, 12, new sbyte[] {-1, 12, 85}),
/* NxS[  85] */ // Shortest string "STRIN"
      new Table(20, 8, 12, new sbyte[] {6, 12, 12, 12, 12, 12, 
          12, -1}),
/* NxS[  86] */ // Shortest string "NE"
      new Table(19, 9, 12, new sbyte[] {23, 12, 12, 12, 12, 12, 
          12, 12, -1}),
/* NxS[  87] */ // Shortest string ""
      new Table(15, 24, 12, new sbyte[] {13, 14, 12, 15, 12, 16, 
          17, 12, 18, 12, 12, 19, -1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 
          10, 11}),
    };

int NextState() {
    if (code == ScanBuff.EndOfFile)
        return eofNum;
    else
        unchecked {
            int rslt;
            int idx = MapC(code) - NxS[state].min;
            if (idx < 0) idx += 27;
            if ((uint)idx >= (uint)NxS[state].rng) rslt = NxS[state].dflt;
            else rslt = NxS[state].nxt[idx];
            return rslt;
        }
}

#endregion


#if BACKUP
        // ==============================================================
        // == Nested struct used for backup in automata that do backup ==
        // ==============================================================

        struct Context // class used for automaton backup.
        {
            public int bPos;
            public int rPos; // scanner.readPos saved value
            public int cCol;
            public int lNum; // Need this in case of backup over EOL.
            public int state;
            public int cChr;
        }
        
        private Context ctx = new Context();
#endif // BACKUP

        // ==============================================================
        // ==== Nested struct to support input switching in scanners ====
        // ==============================================================

		struct BufferContext {
            internal ScanBuff buffSv;
			internal int chrSv;
			internal int cColSv;
			internal int lNumSv;
		}

        // ==============================================================
        // ===== Private methods to save and restore buffer contexts ====
        // ==============================================================

        /// <summary>
        /// This method creates a buffer context record from
        /// the current buffer object, together with some
        /// scanner state values. 
        /// </summary>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        BufferContext MkBuffCtx()
		{
			BufferContext rslt;
			rslt.buffSv = this.buffer;
			rslt.chrSv = this.code;
			rslt.cColSv = this.cCol;
			rslt.lNumSv = this.lNum;
			return rslt;
		}

        /// <summary>
        /// This method restores the buffer value and allied
        /// scanner state from the given context record value.
        /// </summary>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        void RestoreBuffCtx(BufferContext value)
		{
			this.buffer = value.buffSv;
			this.code = value.chrSv;
			this.cCol = value.cColSv;
			this.lNum = value.lNumSv;
        } 
        // =================== End Nested classes =======================

#if !NOFILES
     public Scanner(Stream file) {
            SetSource(file, 0); // unicode option
        }

        public Scanner(Stream file, string codepage) {
            SetSource(file, CodePageHandling.GetCodePage(codepage));
        }   
#endif // !NOFILES

     public Scanner() { }

        private int readPos;

        void GetCode()
        {
            if (code == '\n')  // This needs to be fixed for other conventions
                               // i.e. [\r\n\205\u2028\u2029]
            { 
                cCol = -1;
                lNum++;
            }
            readPos = buffer.Pos;

            // Now read new codepoint.
            code = buffer.Read();
            if (code > ScanBuff.EndOfFile)
            {
#if (!BYTEMODE)
                if (code >= 0xD800 && code <= 0xDBFF)
                {
                    int next = buffer.Read();
                    if (next < 0xDC00 || next > 0xDFFF)
                        code = ScanBuff.UnicodeReplacementChar;
                    else
                        code = (0x10000 + ((code & 0x3FF) << 10) + (next & 0x3FF));
                }
#endif
                cCol++;
            }
        }

        void MarkToken()
        {
#if (!PERSIST)
            buffer.Mark();
#endif
            tokPos = readPos;
            tokLin = lNum;
            tokCol = cCol;
        }
        
        void MarkEnd()
        {
            tokTxt = null;
            tokEPos = readPos;
            tokELin = lNum;
            tokECol = cCol;
        }

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        int Peek()
        {
            int rslt, codeSv = code, cColSv = cCol, lNumSv = lNum, bPosSv = buffer.Pos;
            GetCode(); rslt = code;
            lNum = lNumSv; cCol = cColSv; code = codeSv; buffer.Pos = bPosSv;
            return rslt;
        }

        // ==============================================================
        // =====    Initialization of string-based input buffers     ====
        // ==============================================================

        /// <summary>
        /// Create and initialize a StringBuff buffer object for this scanner
        /// </summary>
        /// <param name="source">the input string</param>
        /// <param name="offset">starting offset in the string</param>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        public void SetSource(string source, int offset)
        {
            this.buffer = ScanBuff.GetBuffer(source);
            this.buffer.Pos = offset;
            this.lNum = 0;
            this.code = '\n'; // to initialize yyline, yycol and lineStart
            GetCode();
        }

        // ================ LineBuffer Initialization ===================
        /// <summary>
        /// Create and initialize a LineBuff buffer object for this scanner
        /// </summary>
        /// <param name="source">the list of input strings</param>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        public void SetSource(IList<string> source)
        {
            this.buffer = ScanBuff.GetBuffer(source);
            this.code = '\n'; // to initialize yyline, yycol and lineStart
            this.lNum = 0;
            GetCode();
        }

#if !NOFILES        
        // =============== StreamBuffer Initialization ==================

        /// <summary>
        /// Create and initialize a StreamBuff buffer object for this scanner.
        /// StreamBuff is buffer for 8-bit byte files.
        /// </summary>
        /// <param name="source">the input byte stream</param>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        public void SetSource(Stream source)
        {
            this.buffer = ScanBuff.GetBuffer(source);
            this.lNum = 0;
            this.code = '\n'; // to initialize yyline, yycol and lineStart
            GetCode();
        }
        
#if !BYTEMODE
        // ================ TextBuffer Initialization ===================

        /// <summary>
        /// Create and initialize a TextBuff buffer object for this scanner.
        /// TextBuff is a buffer for encoded unicode files.
        /// </summary>
        /// <param name="source">the input text file</param>
        /// <param name="fallbackCodePage">Code page to use if file has
        /// no BOM. For 0, use machine default; for -1, 8-bit binary</param>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        public void SetSource(Stream source, int fallbackCodePage)
        {
            this.buffer = ScanBuff.GetBuffer(source, fallbackCodePage);
            this.lNum = 0;
            this.code = '\n'; // to initialize yyline, yycol and lineStart
            GetCode();
        }
#endif // !BYTEMODE
#endif // !NOFILES
        
        // ==============================================================

#if BABEL
        //
        //  Get the next token for Visual Studio
        //
        //  "state" is the inout mode variable that maintains scanner
        //  state between calls, using the EolState property. In principle,
        //  if the calls of EolState are costly set could be called once
        //  only per line, at the start; and get called only at the end
        //  of the line. This needs more infrastructure ...
        //
        public int GetNext(ref int state, out int start, out int end)
        {
                Tokens next;
            int s, e;
            s = state;        // state at start
            EolState = state;
                next = (Tokens)Scan();
            state = EolState;
            e = state;       // state at end;
            start = tokPos;
            end = tokEPos - 1; // end is the index of last char.
            return (int)next;
        }        
#endif // BABEL

        // ======== AbstractScanner<> Implementation =========

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly", MessageId = "yylex")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "yylex")]
        public override int yylex()
        {
            // parserMax is set by reflecting on the Tokens
            // enumeration.  If maxParseToken is defined
            // that is used, otherwise int.MaxValue is used.
            int next;
            do { next = Scan(); } while (next >= parserMax);
            return next;
        }
        
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        int yypos { get { return tokPos; } }
        
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        int yyline { get { return tokLin; } }
        
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        int yycol { get { return tokCol; } }

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly", MessageId = "yytext")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "yytext")]
        public string yytext
        {
            get 
            {
                if (tokTxt == null) 
                    tokTxt = buffer.GetString(tokPos, tokEPos);
                return tokTxt;
            }
        }

        /// <summary>
        /// Discards all but the first "n" codepoints in the recognized pattern.
        /// Resets the buffer position so that only n codepoints have been consumed;
        /// yytext is also re-evaluated. 
        /// </summary>
        /// <param name="n">The number of codepoints to consume</param>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        void yyless(int n)
        {
            buffer.Pos = tokPos;
            // Must read at least one char, so set before start.
            cCol = tokCol - 1; 
            GetCode();
            // Now ensure that line counting is correct.
            lNum = tokLin;
            // And count the rest of the text.
            for (int i = 0; i < n; i++) GetCode();
            MarkEnd();
        }
       
        //
        //  It would be nice to count backward in the text
        //  but it does not seem possible to re-establish
        //  the correct column counts except by going forward.
        //
        /// <summary>
        /// Removes the last "n" code points from the pattern.
        /// </summary>
        /// <param name="n">The number to remove</param>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        void _yytrunc(int n) { yyless(yyleng - n); }
        
        //
        // This is painful, but we no longer count
        // codepoints.  For the overwhelming majority 
        // of cases the single line code is fast, for
        // the others, well, at least it is all in the
        // buffer so no files are touched. Note that we
        // can't use (tokEPos - tokPos) because of the
        // possibility of surrogate pairs in the token.
        //
        /// <summary>
        /// The length of the pattern in codepoints (not the same as 
        /// string-length if the pattern contains any surrogate pairs).
        /// </summary>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly", MessageId = "yyleng")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "yyleng")]
        public int yyleng
        {
            get {
                if (tokELin == tokLin)
                    return tokECol - tokCol;
                else
#if BYTEMODE
                    return tokEPos - tokPos;
#else
                {
                    int ch;
                    int count = 0;
                    int save = buffer.Pos;
                    buffer.Pos = tokPos;
                    do {
                        ch = buffer.Read();
                        if (!char.IsHighSurrogate((char)ch)) count++;
                    } while (buffer.Pos < tokEPos && ch != ScanBuff.EndOfFile);
                    buffer.Pos = save;
                    return count;
                }
#endif // BYTEMODE
            }
        }
        
        // ============ methods available in actions ==============

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal int YY_START {
            get { return currentScOrd; }
            set { currentScOrd = value; 
                  currentStart = startState[value]; 
            } 
        }
        
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal void BEGIN(int next) {
            currentScOrd = next;
            currentStart = startState[next];
        }

        // ============== The main tokenizer code =================

        int Scan() {
                for (; ; ) {
                    int next;              // next state to enter
#if LEFTANCHORS
                    for (;;) {
                        // Discard characters that do not start any pattern.
                        // Must check the left anchor condition after *every* GetCode!
                        state = ((cCol == 0) ? anchorState[currentScOrd] : currentStart);
                        if ((next = NextState()) != goStart) break; // LOOP EXIT HERE...
                        GetCode();
                    }
                    
#else // !LEFTANCHORS
                    state = currentStart;
                    while ((next = NextState()) == goStart) {
                        // At this point, the current character has no
                        // transition from the current state.  We discard 
                        // the "no-match" char.   In traditional LEX such 
                        // characters are echoed to the console.
                        GetCode();
                    }
#endif // LEFTANCHORS                    
                    // At last, a valid transition ...    
                    MarkToken();
                    state = next;
                    GetCode();                    
#if BACKUP
                    bool contextSaved = false;
                    while ((next = NextState()) > eofNum) { // Exit for goStart AND for eofNum
                        if (state <= maxAccept && next > maxAccept) { // need to prepare backup data
                            // Store data for the *latest* accept state that was found.
                            SaveStateAndPos( ref ctx );
                            contextSaved = true;
                        }
                        state = next;
                        GetCode();
                    }
                    if (state > maxAccept && contextSaved)
                        RestoreStateAndPos( ref ctx );
#else  // BACKUP
                    while ((next = NextState()) > eofNum) { // Exit for goStart AND for eofNum
                         state = next;
                         GetCode();
                    }
#endif // BACKUP
                    if (state <= maxAccept) {
                        MarkEnd();
#region ActionSwitch
#pragma warning disable 162, 1522
    switch (state)
    {
        case eofNum:
            if (yywrap())
                return (int)Tokens.EOF;
            break;
        case 1: // Recognized '{Ident}',	Shortest string "A"
        case 2: // Recognized '{Ident}',	Shortest string "N"
        case 3: // Recognized '{Ident}',	Shortest string "D"
        case 4: // Recognized '{Ident}',	Shortest string "S"
        case 5: // Recognized '{Ident}',	Shortest string "I"
        case 7: // Recognized '{Ident}',	Shortest string "C"
        case 8: // Recognized '{Ident}',	Shortest string "R"
        case 9: // Recognized '{Ident}',	Shortest string "E"
        case 10: // Recognized '{Ident}',	Shortest string "T"
        case 11: // Recognized '{Ident}',	Shortest string "O"
        case 12: // Recognized '{Ident}',	Shortest string "B"
        case 13: // Recognized '{Ident}',	Shortest string "L"
        case 14: // Recognized '{Ident}',	Shortest string "F"
        case 15: // Recognized '{Ident}',	Shortest string "W"
        case 16: // Recognized '{Ident}',	Shortest string "G"
        case 17: // Recognized '{Ident}',	Shortest string "V"
        case 18: // Recognized '{Ident}',	Shortest string "P"
        case 20: // Recognized '{Ident}',	Shortest string "PR"
        case 21: // Recognized '{Ident}',	Shortest string "PO"
        case 22: // Recognized '{Ident}',	Shortest string "PRI"
        case 23: // Recognized '{Ident}',	Shortest string "NO"
        case 24: // Recognized '{Ident}',	Shortest string "VO"
        case 25: // Recognized '{Ident}',	Shortest string "AN"
        case 26: // Recognized '{Ident}',	Shortest string "GO"
        case 27: // Recognized '{Ident}',	Shortest string "GOT"
        case 28: // Recognized '{Ident}',	Shortest string "WH"
        case 29: // Recognized '{Ident}',	Shortest string "WHI"
        case 30: // Recognized '{Ident}',	Shortest string "ELS"
        case 31: // Recognized '{Ident}',	Shortest string "FA"
        case 32: // Recognized '{Ident}',	Shortest string "FO"
        case 33: // Recognized '{Ident}',	Shortest string "FU"
        case 34: // Recognized '{Ident}',	Shortest string "FUN"
        case 35: // Recognized '{Ident}',	Shortest string "FUNC"
        case 36: // Recognized '{Ident}',	Shortest string "FUNCT"
        case 37: // Recognized '{Ident}',	Shortest string "FUNCTI"
        case 38: // Recognized '{Ident}',	Shortest string "THE"
        case 39: // Recognized '{Ident}',	Shortest string "EL"
        case 40: // Recognized '{Ident}',	Shortest string "LI"
        case 41: // Recognized '{Ident}',	Shortest string "LIN"
        case 42: // Recognized '{Ident}',	Shortest string "LINE"
        case 43: // Recognized '{Ident}',	Shortest string "LINE_"
        case 44: // Recognized '{Ident}',	Shortest string "LINE_N"
        case 45: // Recognized '{Ident}',	Shortest string "DI"
        case 46: // Recognized '{Ident}',	Shortest string "OB"
        case 47: // Recognized '{Ident}',	Shortest string "OBJ"
        case 48: // Recognized '{Ident}',	Shortest string "OBJE"
        case 49: // Recognized '{Ident}',	Shortest string "OBJF"
        case 50: // Recognized '{Ident}',	Shortest string "SU"
        case 51: // Recognized '{Ident}',	Shortest string "TR"
        case 52: // Recognized '{Ident}',	Shortest string "TH"
        case 53: // Recognized '{Ident}',	Shortest string "TY"
        case 54: // Recognized '{Ident}',	Shortest string "EA"
        case 55: // Recognized '{Ident}',	Shortest string "EN"
        case 56: // Recognized '{Ident}',	Shortest string "EX"
        case 57: // Recognized '{Ident}',	Shortest string "EXI"
        case 60: // Recognized '{Ident}',	Shortest string "ENDS"
        case 61: // Recognized '{Ident}',	Shortest string "ENDI"
        case 62: // Recognized '{Ident}',	Shortest string "ENDF"
        case 63: // Recognized '{Ident}',	Shortest string "EAC"
        case 64: // Recognized '{Ident}',	Shortest string "RE"
        case 65: // Recognized '{Ident}',	Shortest string "RET"
        case 66: // Recognized '{Ident}',	Shortest string "RETU"
        case 67: // Recognized '{Ident}',	Shortest string "CR"
        case 68: // Recognized '{Ident}',	Shortest string "CRE"
        case 69: // Recognized '{Ident}',	Shortest string "CREA"
        case 70: // Recognized '{Ident}',	Shortest string "CREAT"
        case 71: // Recognized '{Ident}',	Shortest string "CREATE"
        case 72: // Recognized '{Ident}',	Shortest string "CREATEO"
        case 73: // Recognized '{Ident}',	Shortest string "CREATEOB"
        case 74: // Recognized '{Ident}',	Shortest string "CREATEOBJ"
        case 75: // Recognized '{Ident}',	Shortest string "IN"
        case 76: // Recognized '{Ident}',	Shortest string "INT"
        case 77: // Recognized '{Ident}',	Shortest string "INV"
        case 78: // Recognized '{Ident}',	Shortest string "INVA"
        case 79: // Recognized '{Ident}',	Shortest string "INTE"
        case 80: // Recognized '{Ident}',	Shortest string "INTEG"
        case 81: // Recognized '{Ident}',	Shortest string "ST"
        case 82: // Recognized '{Ident}',	Shortest string "STR"
        case 83: // Recognized '{Ident}',	Shortest string "STE"
        case 84: // Recognized '{Ident}',	Shortest string "STRI"
        case 85: // Recognized '{Ident}',	Shortest string "STRIN"
        case 86: // Recognized '{Ident}',	Shortest string "NE"
return (int)Tokens.ident;
            break;
        case 6: // Recognized 'M',	Shortest string "M"
        case 58: // Recognized 'EXIT',	Shortest string "EXIT"
        case 59: // Recognized 'END',	Shortest string "END"
return (int)Tokens.keyword;
            break;
        case 19: // Recognized '{Number}',	Shortest string "0"
return (int)Tokens.number;
            break;
        default:
            break;
    }
#pragma warning restore 162, 1522
#endregion
                    }
                }
        }

#if BACKUP
        void SaveStateAndPos(ref Context ctx) {
            ctx.bPos  = buffer.Pos;
            ctx.rPos  = readPos;
            ctx.cCol  = cCol;
            ctx.lNum  = lNum;
            ctx.state = state;
            ctx.cChr  = code;
        }

        void RestoreStateAndPos(ref Context ctx) {
            buffer.Pos = ctx.bPos;
            readPos = ctx.rPos;
            cCol  = ctx.cCol;
            lNum  = ctx.lNum;
            state = ctx.state;
            code  = ctx.cChr;
        }
#endif  // BACKUP

        // ============= End of the tokenizer code ================

#if STACK        
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal void yy_clear_stack() { scStack.Clear(); }
        
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal int yy_top_state() { return scStack.Peek(); }
        
        internal void yy_push_state(int state)
        {
            scStack.Push(currentScOrd);
            BEGIN(state);
        }
        
        internal void yy_pop_state()
        {
            // Protect against input errors that pop too far ...
            if (scStack.Count > 0) {
				int newSc = scStack.Pop();
				BEGIN(newSc);
            } // Otherwise leave stack unchanged.
        }
 #endif // STACK

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal void ECHO() { Console.Out.Write(yytext); }
        
    } // end class $Scanner


} // end namespace
