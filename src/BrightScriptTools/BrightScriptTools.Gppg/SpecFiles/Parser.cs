// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.0.0.0
// Machine:  OSTLT0248323
// DateTime: 19/03/2016 08:42:14
// UserName: CFE05
// Input file <SpecFiles\BrightScript.y - 19/03/2016 08:42:08>

// options: babel lines diagnose & report gplex

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using BrightScriptTools.Gppg.GPGen;
using System.Collections;
using BrightScriptTools.GPlex;
using BrightScriptTools.GPlex.Parser;

namespace BrightScriptTools.Compiler
{
public enum Tokens {error=2,EOF=3,keyword=4,ident=5,number=6,
    str=7,cmnt=8,type=9,funcs=10,reserved=11,bar=12,
    dot=13,semi=14,star=15,lt=16,gt=17,comma=18,
    slash=19,lBrac=20,rBrac=21,lPar=22,rPar=23,lBrace=24,
    rBrace=25,sub=26,function=27,comment=28,maxParseToken=29,EOL=30,
    errTok=31,repErr=32};

// Abstract base class for GPLEX scanners
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.0.0.0")]
public abstract class ScanBase : AbstractScanner<int,LexSpan> {
  private LexSpan __yylloc = new LexSpan();
  public override LexSpan yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }

  protected abstract int CurrentSc { get; set; }
  //
  // Override the virtual EolState property if the scanner state is more
  // complicated then a simple copy of the current start state ordinal
  //
  public virtual int EolState { get { return CurrentSc; } set { CurrentSc = value; } }
}

// Interface class for 'colorizing' scanners
public interface IColorScan {
  void SetSource(string source, int offset);
  int GetNext(ref int state, out int start, out int end);
}

// Utility class for encapsulating token information
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.0.0.0")]
public class ScanObj {
  public int token;
  public int yylval;
  public LexSpan yylloc;
  public ScanObj( int t, int val, LexSpan loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.0.0.0")]
public partial class Parser: ShiftReduceParser<int, LexSpan>
{
#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[6];
  private static State[] states = new State[6];
  private static string[] nonTerms = new string[] {
      "Program", "$accept", "SubSection", };

  static Parser() {
    states[0] = new State(new int[]{26,4,2,5},new int[]{-1,1,-3,3});
    states[1] = new State(new int[]{3,2});
    states[2] = new State(-1);
    states[3] = new State(-2);
    states[4] = new State(-4);
    states[5] = new State(-3);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-2, new int[]{-1,3});
    rules[2] = new Rule(-1, new int[]{-3});
    rules[3] = new Rule(-1, new int[]{2});
    rules[4] = new Rule(-3, new int[]{26});
    rules[5] = new Rule(-3, new int[]{2});

    aliases = new Dictionary<int, string>();
    aliases.Add(12, "|");
    aliases.Add(13, ".");
    aliases.Add(14, ";");
    aliases.Add(15, "*");
    aliases.Add(16, "<");
    aliases.Add(17, ">");
    aliases.Add(18, ",");
    aliases.Add(19, "/");
    aliases.Add(20, "[");
    aliases.Add(21, "]");
    aliases.Add(22, "(");
    aliases.Add(23, ")");
    aliases.Add(24, "{");
    aliases.Add(25, "}");
    aliases.Add(26, "Sub");
    aliases.Add(27, "Function");
    aliases.Add(28, "'");
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

#line 37 "SpecFiles\BrightScript.y"
 #line default
}
}
