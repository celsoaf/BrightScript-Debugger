// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.0.0.0
// Machine:  CELSO-PC
// DateTime: 4/27/2016 9:27:40 PM
// UserName: Celso
// Input file <SpecFiles\BrightScript.y - 4/23/2016 3:25:49 PM>

// options: babel lines diagnose & report gplex

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using BrightScriptTools.Gppg.GPGen;
using System.Collections;
using BrightScriptTools.GPlex;
using BrightScriptTools.GPlex.Parser;

namespace BrightScriptTools.Compiler
{
public enum Tokens {error=2,EOF=3,bar=4,dot=5,semi=6,
    star=7,lt=8,gt=9,ltEqual=10,gtEqual=11,notEqual=12,
    comma=13,slash=14,lBrac=15,rBrac=16,lPar=17,rPar=18,
    lBrace=19,rBrace=20,Eol=21,equal=22,plus=23,minus=24,
    questionMark=25,colon=26,bsIdent=27,bsNumber=28,bsStr=29,bsCmnt=30,
    bsFuncs=31,bsType=32,bsAs=33,bsTrue=34,bsFalse=35,bsInvalid=36,
    bsNot=37,bsM=38,bsStop=39,bsReturn=40,bsPrint=41,bsIf=42,
    bsElse=43,bsFor=44,bsTo=45,bsEach=46,bsStep=47,bsIn=48,
    bsWhile=49,bsSub=50,bsFunction=51,bsEnd=52,maxParseToken=53,EOL=54,
    comment=55,errTok=56,repErr=57};

// Abstract base class for GPLEX scanners
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.0.0.0")]
public abstract class ScanBase : AbstractScanner<int,LexSpan> {
  private LexSpan __yylloc = new LexSpan();
  public override LexSpan yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }

  protected abstract int CurrentSc { get; set; }
  //
  // Override the virtual EolState property if the scanner state is more
  // complicated then a simple copy of the current start state ordinal
  //
  public virtual int EolState { get { return CurrentSc; } set { CurrentSc = value; } }
}

// Interface class for 'colorizing' scanners
public interface IColorScan {
  void SetSource(string source, int offset);
  int GetNext(ref int state, out int start, out int end);
}

// Utility class for encapsulating token information
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.0.0.0")]
public class ScanObj {
  public int token;
  public int yylval;
  public LexSpan yylloc;
  public ScanObj( int t, int val, LexSpan loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.0.0.0")]
public partial class Parser: ShiftReduceParser<int, LexSpan>
{
#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[86];
  private static State[] states = new State[170];
  private static string[] nonTerms = new string[] {
      "Program", "$accept", "SourceElements", "EolOpt", "SourceElement", "SubDeclaration", 
      "FunctionDeclaration", "ParameterList", "Type", "StatementList", "Parameter", 
      "ParameterTail", "Literal", "Statement", "AssignStatement", "IfStatement", 
      "IterationStatement", "ReturnStatement", "DebuggerStatement", "PrintStatement", 
      "SequenceExpression", "MemberExpression", "SingleExpression", "BooleanExpression", 
      "Block", "UnaryExpression", "CallExpression", "BinaryExpression", "LabelledStatementList", 
      "LabelledStatement", "LabelledStatementTail", "LabelSeparator", "FunctionStatement", 
      "BooleanLiteral", "BooleanOperator", "Arguments", "NullLiteral", "StringLiteral", 
      "NumericLiteral", };

  static Parser() {
    states[0] = new State(new int[]{21,8,50,-18,51,-18,3,-18},new int[]{-1,1,-3,3,-4,5});
    states[1] = new State(new int[]{3,2});
    states[2] = new State(-1);
    states[3] = new State(new int[]{3,4});
    states[4] = new State(-2);
    states[5] = new State(new int[]{50,11,51,161,3,-4},new int[]{-5,6,-6,10,-7,160});
    states[6] = new State(new int[]{21,8,50,-18,51,-18,3,-18},new int[]{-3,7,-4,5});
    states[7] = new State(-3);
    states[8] = new State(new int[]{21,8,50,-18,51,-18,3,-18,27,-18,42,-18,44,-18,49,-18,40,-18,39,-18,41,-18,25,-18,19,-18,17,-18,24,-18,31,-18,36,-18,34,-18,35,-18,29,-18,28,-18,52,-18,43,-18,20,-18},new int[]{-4,9});
    states[9] = new State(-17);
    states[10] = new State(-5);
    states[11] = new State(new int[]{27,12});
    states[12] = new State(new int[]{17,13});
    states[13] = new State(new int[]{27,98,18,-10},new int[]{-8,14,-11,93});
    states[14] = new State(new int[]{18,15});
    states[15] = new State(new int[]{21,8,27,-18,42,-18,44,-18,49,-18,40,-18,39,-18,41,-18,25,-18,19,-18,17,-18,24,-18,31,-18,36,-18,34,-18,35,-18,29,-18,28,-18,52,-18},new int[]{-10,16,-4,19});
    states[16] = new State(new int[]{52,17});
    states[17] = new State(new int[]{50,18});
    states[18] = new State(-8);
    states[19] = new State(new int[]{27,56,42,104,44,126,49,140,40,146,39,150,41,152,25,154,19,27,17,44,24,47,31,60,36,67,34,69,35,70,29,72,28,74,52,-20,43,-20},new int[]{-14,20,-15,22,-22,23,-16,103,-17,125,-18,145,-19,149,-20,151,-21,156,-23,157,-25,26,-26,43,-27,49,-28,64,-13,65,-37,66,-34,68,-38,71,-39,73});
    states[20] = new State(new int[]{21,8,27,-18,42,-18,44,-18,49,-18,40,-18,39,-18,41,-18,25,-18,19,-18,17,-18,24,-18,31,-18,36,-18,34,-18,35,-18,29,-18,28,-18,52,-18,43,-18},new int[]{-10,21,-4,19});
    states[21] = new State(-19);
    states[22] = new State(-21);
    states[23] = new State(new int[]{22,24,17,51,23,75,24,77,7,79,14,81});
    states[24] = new State(new int[]{19,27,17,44,24,47,27,56,31,60,36,67,34,69,35,70,29,72,28,74},new int[]{-23,25,-25,26,-26,43,-27,49,-22,50,-28,64,-13,65,-37,66,-34,68,-38,71,-39,73});
    states[25] = new State(-28);
    states[26] = new State(-41);
    states[27] = new State(new int[]{21,8,27,-18,20,-18},new int[]{-29,28,-4,30});
    states[28] = new State(new int[]{20,29});
    states[29] = new State(-46);
    states[30] = new State(new int[]{27,39,20,-48},new int[]{-30,31});
    states[31] = new State(new int[]{21,36,13,37,20,-18},new int[]{-31,32,-32,33,-4,38});
    states[32] = new State(-47);
    states[33] = new State(new int[]{27,39},new int[]{-30,34});
    states[34] = new State(new int[]{21,36,13,37,20,-18},new int[]{-31,35,-32,33,-4,38});
    states[35] = new State(-49);
    states[36] = new State(new int[]{21,8,27,-54,20,-18},new int[]{-4,9});
    states[37] = new State(-55);
    states[38] = new State(-50);
    states[39] = new State(new int[]{26,40});
    states[40] = new State(new int[]{19,27,17,44,24,47,27,56,31,60,36,67,34,69,35,70,29,72,28,74,51,83},new int[]{-23,41,-33,42,-25,26,-26,43,-27,49,-22,50,-28,64,-13,65,-37,66,-34,68,-38,71,-39,73});
    states[41] = new State(-51);
    states[42] = new State(-52);
    states[43] = new State(-42);
    states[44] = new State(new int[]{19,27,17,44,24,47,27,56,31,60,36,67,34,69,35,70,29,72,28,74},new int[]{-23,45,-25,26,-26,43,-27,49,-22,50,-28,64,-13,65,-37,66,-34,68,-38,71,-39,73});
    states[45] = new State(new int[]{18,46});
    states[46] = new State(-63);
    states[47] = new State(new int[]{19,27,17,44,24,47,27,56,31,60,36,67,34,69,35,70,29,72,28,74},new int[]{-23,48,-25,26,-26,43,-27,49,-22,50,-28,64,-13,65,-37,66,-34,68,-38,71,-39,73});
    states[48] = new State(-64);
    states[49] = new State(-43);
    states[50] = new State(new int[]{17,51,23,75,24,77,7,79,14,81});
    states[51] = new State(new int[]{19,27,17,44,24,47,27,56,31,60,36,67,34,69,35,70,29,72,28,74,18,-62},new int[]{-36,52,-23,54,-25,26,-26,43,-27,49,-22,50,-28,64,-13,65,-37,66,-34,68,-38,71,-39,73});
    states[52] = new State(new int[]{18,53});
    states[53] = new State(-59);
    states[54] = new State(new int[]{19,27,17,44,24,47,27,56,31,60,36,67,34,69,35,70,29,72,28,74,18,-62},new int[]{-36,55,-23,54,-25,26,-26,43,-27,49,-22,50,-28,64,-13,65,-37,66,-34,68,-38,71,-39,73});
    states[55] = new State(-61);
    states[56] = new State(new int[]{15,57,22,-69,17,-69,23,-69,24,-69,7,-69,14,-69});
    states[57] = new State(new int[]{19,27,17,44,24,47,27,56,31,60,36,67,34,69,35,70,29,72,28,74},new int[]{-23,58,-25,26,-26,43,-27,49,-22,50,-28,64,-13,65,-37,66,-34,68,-38,71,-39,73});
    states[58] = new State(new int[]{16,59});
    states[59] = new State(-70);
    states[60] = new State(new int[]{17,61});
    states[61] = new State(new int[]{19,27,17,44,24,47,27,56,31,60,36,67,34,69,35,70,29,72,28,74,18,-62},new int[]{-36,62,-23,54,-25,26,-26,43,-27,49,-22,50,-28,64,-13,65,-37,66,-34,68,-38,71,-39,73});
    states[62] = new State(new int[]{18,63});
    states[63] = new State(-60);
    states[64] = new State(-44);
    states[65] = new State(-45);
    states[66] = new State(-77);
    states[67] = new State(-81);
    states[68] = new State(-78);
    states[69] = new State(-82);
    states[70] = new State(-83);
    states[71] = new State(-79);
    states[72] = new State(-84);
    states[73] = new State(-80);
    states[74] = new State(-85);
    states[75] = new State(new int[]{19,27,17,44,24,47,27,56,31,60,36,67,34,69,35,70,29,72,28,74},new int[]{-23,76,-25,26,-26,43,-27,49,-22,50,-28,64,-13,65,-37,66,-34,68,-38,71,-39,73});
    states[76] = new State(-65);
    states[77] = new State(new int[]{19,27,17,44,24,47,27,56,31,60,36,67,34,69,35,70,29,72,28,74},new int[]{-23,78,-25,26,-26,43,-27,49,-22,50,-28,64,-13,65,-37,66,-34,68,-38,71,-39,73});
    states[78] = new State(-66);
    states[79] = new State(new int[]{19,27,17,44,24,47,27,56,31,60,36,67,34,69,35,70,29,72,28,74},new int[]{-23,80,-25,26,-26,43,-27,49,-22,50,-28,64,-13,65,-37,66,-34,68,-38,71,-39,73});
    states[80] = new State(-67);
    states[81] = new State(new int[]{19,27,17,44,24,47,27,56,31,60,36,67,34,69,35,70,29,72,28,74},new int[]{-23,82,-25,26,-26,43,-27,49,-22,50,-28,64,-13,65,-37,66,-34,68,-38,71,-39,73});
    states[82] = new State(-68);
    states[83] = new State(new int[]{17,84});
    states[84] = new State(new int[]{27,98,18,-10},new int[]{-8,85,-11,93});
    states[85] = new State(new int[]{18,86});
    states[86] = new State(new int[]{33,91,21,-16,52,-16,27,-16,42,-16,44,-16,49,-16,40,-16,39,-16,41,-16,25,-16,19,-16,17,-16,24,-16,31,-16,36,-16,34,-16,35,-16,29,-16,28,-16},new int[]{-9,87});
    states[87] = new State(new int[]{21,8,27,-18,42,-18,44,-18,49,-18,40,-18,39,-18,41,-18,25,-18,19,-18,17,-18,24,-18,31,-18,36,-18,34,-18,35,-18,29,-18,28,-18,52,-18},new int[]{-10,88,-4,19});
    states[88] = new State(new int[]{52,89});
    states[89] = new State(new int[]{51,90});
    states[90] = new State(-53);
    states[91] = new State(new int[]{32,92});
    states[92] = new State(-15);
    states[93] = new State(new int[]{13,95,18,-12},new int[]{-12,94});
    states[94] = new State(-9);
    states[95] = new State(new int[]{27,98},new int[]{-11,96});
    states[96] = new State(new int[]{13,95,18,-12},new int[]{-12,97});
    states[97] = new State(-11);
    states[98] = new State(new int[]{22,99,33,91,13,-16,18,-16},new int[]{-9,102});
    states[99] = new State(new int[]{36,67,34,69,35,70,29,72,28,74},new int[]{-13,100,-37,66,-34,68,-38,71,-39,73});
    states[100] = new State(new int[]{33,91,13,-16,18,-16},new int[]{-9,101});
    states[101] = new State(-13);
    states[102] = new State(-14);
    states[103] = new State(-22);
    states[104] = new State(new int[]{34,69,35,70,37,114,19,27,17,44,24,47,27,56,31,60,36,67,29,72,28,74},new int[]{-24,105,-34,113,-23,116,-25,26,-26,43,-27,49,-22,50,-28,64,-13,65,-37,66,-38,71,-39,73});
    states[105] = new State(new int[]{21,8,27,-18,42,-18,44,-18,49,-18,40,-18,39,-18,41,-18,25,-18,19,-18,17,-18,24,-18,31,-18,36,-18,34,-18,35,-18,29,-18,28,-18,52,-18,43,-18},new int[]{-10,106,-4,19});
    states[106] = new State(new int[]{52,107,43,109});
    states[107] = new State(new int[]{42,108});
    states[108] = new State(-29);
    states[109] = new State(new int[]{21,8,27,-18,42,-18,44,-18,49,-18,40,-18,39,-18,41,-18,25,-18,19,-18,17,-18,24,-18,31,-18,36,-18,34,-18,35,-18,29,-18,28,-18,52,-18},new int[]{-10,110,-4,19});
    states[110] = new State(new int[]{52,111});
    states[111] = new State(new int[]{42,112});
    states[112] = new State(-30);
    states[113] = new State(new int[]{21,-56,52,-56,43,-56,27,-56,42,-56,44,-56,49,-56,40,-56,39,-56,41,-56,25,-56,19,-56,17,-56,24,-56,31,-56,36,-56,34,-56,35,-56,29,-56,28,-56,8,-78,10,-78,9,-78,11,-78,22,-78,12,-78});
    states[114] = new State(new int[]{34,69,35,70,37,114,19,27,17,44,24,47,27,56,31,60,36,67,29,72,28,74},new int[]{-24,115,-34,113,-23,116,-25,26,-26,43,-27,49,-22,50,-28,64,-13,65,-37,66,-38,71,-39,73});
    states[115] = new State(-57);
    states[116] = new State(new int[]{8,119,10,120,9,121,11,122,22,123,12,124},new int[]{-35,117});
    states[117] = new State(new int[]{19,27,17,44,24,47,27,56,31,60,36,67,34,69,35,70,29,72,28,74},new int[]{-23,118,-25,26,-26,43,-27,49,-22,50,-28,64,-13,65,-37,66,-34,68,-38,71,-39,73});
    states[118] = new State(-58);
    states[119] = new State(-71);
    states[120] = new State(-72);
    states[121] = new State(-73);
    states[122] = new State(-74);
    states[123] = new State(-75);
    states[124] = new State(-76);
    states[125] = new State(-23);
    states[126] = new State(new int[]{46,133,19,27,17,44,24,47,27,56,31,60,36,67,34,69,35,70,29,72,28,74},new int[]{-23,127,-25,26,-26,43,-27,49,-22,50,-28,64,-13,65,-37,66,-34,68,-38,71,-39,73});
    states[127] = new State(new int[]{45,128});
    states[128] = new State(new int[]{19,27,17,44,24,47,27,56,31,60,36,67,34,69,35,70,29,72,28,74},new int[]{-23,129,-25,26,-26,43,-27,49,-22,50,-28,64,-13,65,-37,66,-34,68,-38,71,-39,73});
    states[129] = new State(new int[]{21,8,27,-18,42,-18,44,-18,49,-18,40,-18,39,-18,41,-18,25,-18,19,-18,17,-18,24,-18,31,-18,36,-18,34,-18,35,-18,29,-18,28,-18,52,-18},new int[]{-10,130,-4,19});
    states[130] = new State(new int[]{52,131});
    states[131] = new State(new int[]{44,132});
    states[132] = new State(-31);
    states[133] = new State(new int[]{19,27,17,44,24,47,27,56,31,60,36,67,34,69,35,70,29,72,28,74},new int[]{-23,134,-25,26,-26,43,-27,49,-22,50,-28,64,-13,65,-37,66,-34,68,-38,71,-39,73});
    states[134] = new State(new int[]{48,135});
    states[135] = new State(new int[]{19,27,17,44,24,47,27,56,31,60,36,67,34,69,35,70,29,72,28,74},new int[]{-23,136,-25,26,-26,43,-27,49,-22,50,-28,64,-13,65,-37,66,-34,68,-38,71,-39,73});
    states[136] = new State(new int[]{21,8,27,-18,42,-18,44,-18,49,-18,40,-18,39,-18,41,-18,25,-18,19,-18,17,-18,24,-18,31,-18,36,-18,34,-18,35,-18,29,-18,28,-18,52,-18},new int[]{-10,137,-4,19});
    states[137] = new State(new int[]{52,138});
    states[138] = new State(new int[]{44,139});
    states[139] = new State(-32);
    states[140] = new State(new int[]{34,69,35,70,37,114,19,27,17,44,24,47,27,56,31,60,36,67,29,72,28,74},new int[]{-24,141,-34,113,-23,116,-25,26,-26,43,-27,49,-22,50,-28,64,-13,65,-37,66,-38,71,-39,73});
    states[141] = new State(new int[]{21,8,27,-18,42,-18,44,-18,49,-18,40,-18,39,-18,41,-18,25,-18,19,-18,17,-18,24,-18,31,-18,36,-18,34,-18,35,-18,29,-18,28,-18,52,-18},new int[]{-10,142,-4,19});
    states[142] = new State(new int[]{52,143});
    states[143] = new State(new int[]{49,144});
    states[144] = new State(-33);
    states[145] = new State(-24);
    states[146] = new State(new int[]{21,148,19,27,17,44,24,47,27,56,31,60,36,67,34,69,35,70,29,72,28,74},new int[]{-23,147,-25,26,-26,43,-27,49,-22,50,-28,64,-13,65,-37,66,-34,68,-38,71,-39,73});
    states[147] = new State(-34);
    states[148] = new State(-35);
    states[149] = new State(-25);
    states[150] = new State(-36);
    states[151] = new State(-26);
    states[152] = new State(new int[]{19,27,17,44,24,47,27,56,31,60,36,67,34,69,35,70,29,72,28,74},new int[]{-23,153,-25,26,-26,43,-27,49,-22,50,-28,64,-13,65,-37,66,-34,68,-38,71,-39,73});
    states[153] = new State(-37);
    states[154] = new State(new int[]{19,27,17,44,24,47,27,56,31,60,36,67,34,69,35,70,29,72,28,74},new int[]{-23,155,-25,26,-26,43,-27,49,-22,50,-28,64,-13,65,-37,66,-34,68,-38,71,-39,73});
    states[155] = new State(-38);
    states[156] = new State(-27);
    states[157] = new State(new int[]{5,158,21,-39,27,-39,42,-39,44,-39,49,-39,40,-39,39,-39,41,-39,25,-39,19,-39,17,-39,24,-39,31,-39,36,-39,34,-39,35,-39,29,-39,28,-39,52,-39,43,-39});
    states[158] = new State(new int[]{19,27,17,44,24,47,27,56,31,60,36,67,34,69,35,70,29,72,28,74},new int[]{-21,159,-23,157,-25,26,-26,43,-27,49,-22,50,-28,64,-13,65,-37,66,-34,68,-38,71,-39,73});
    states[159] = new State(-40);
    states[160] = new State(-6);
    states[161] = new State(new int[]{27,162});
    states[162] = new State(new int[]{17,163});
    states[163] = new State(new int[]{27,98,18,-10},new int[]{-8,164,-11,93});
    states[164] = new State(new int[]{18,165});
    states[165] = new State(new int[]{33,91,21,-16,52,-16,27,-16,42,-16,44,-16,49,-16,40,-16,39,-16,41,-16,25,-16,19,-16,17,-16,24,-16,31,-16,36,-16,34,-16,35,-16,29,-16,28,-16},new int[]{-9,166});
    states[166] = new State(new int[]{21,8,27,-18,42,-18,44,-18,49,-18,40,-18,39,-18,41,-18,25,-18,19,-18,17,-18,24,-18,31,-18,36,-18,34,-18,35,-18,29,-18,28,-18,52,-18},new int[]{-10,167,-4,19});
    states[167] = new State(new int[]{52,168});
    states[168] = new State(new int[]{51,169});
    states[169] = new State(-7);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-2, new int[]{-1,3});
    rules[2] = new Rule(-1, new int[]{-3,3});
    rules[3] = new Rule(-3, new int[]{-4,-5,-3});
    rules[4] = new Rule(-3, new int[]{-4});
    rules[5] = new Rule(-5, new int[]{-6});
    rules[6] = new Rule(-5, new int[]{-7});
    rules[7] = new Rule(-7, new int[]{51,27,17,-8,18,-9,-10,52,51});
    rules[8] = new Rule(-6, new int[]{50,27,17,-8,18,-10,52,50});
    rules[9] = new Rule(-8, new int[]{-11,-12});
    rules[10] = new Rule(-8, new int[]{});
    rules[11] = new Rule(-12, new int[]{13,-11,-12});
    rules[12] = new Rule(-12, new int[]{});
    rules[13] = new Rule(-11, new int[]{27,22,-13,-9});
    rules[14] = new Rule(-11, new int[]{27,-9});
    rules[15] = new Rule(-9, new int[]{33,32});
    rules[16] = new Rule(-9, new int[]{});
    rules[17] = new Rule(-4, new int[]{21,-4});
    rules[18] = new Rule(-4, new int[]{});
    rules[19] = new Rule(-10, new int[]{-4,-14,-10});
    rules[20] = new Rule(-10, new int[]{-4});
    rules[21] = new Rule(-14, new int[]{-15});
    rules[22] = new Rule(-14, new int[]{-16});
    rules[23] = new Rule(-14, new int[]{-17});
    rules[24] = new Rule(-14, new int[]{-18});
    rules[25] = new Rule(-14, new int[]{-19});
    rules[26] = new Rule(-14, new int[]{-20});
    rules[27] = new Rule(-14, new int[]{-21});
    rules[28] = new Rule(-15, new int[]{-22,22,-23});
    rules[29] = new Rule(-16, new int[]{42,-24,-10,52,42});
    rules[30] = new Rule(-16, new int[]{42,-24,-10,43,-10,52,42});
    rules[31] = new Rule(-17, new int[]{44,-23,45,-23,-10,52,44});
    rules[32] = new Rule(-17, new int[]{44,46,-23,48,-23,-10,52,44});
    rules[33] = new Rule(-17, new int[]{49,-24,-10,52,49});
    rules[34] = new Rule(-18, new int[]{40,-23});
    rules[35] = new Rule(-18, new int[]{40,21});
    rules[36] = new Rule(-19, new int[]{39});
    rules[37] = new Rule(-20, new int[]{41,-23});
    rules[38] = new Rule(-20, new int[]{25,-23});
    rules[39] = new Rule(-21, new int[]{-23});
    rules[40] = new Rule(-21, new int[]{-23,5,-21});
    rules[41] = new Rule(-23, new int[]{-25});
    rules[42] = new Rule(-23, new int[]{-26});
    rules[43] = new Rule(-23, new int[]{-27});
    rules[44] = new Rule(-23, new int[]{-28});
    rules[45] = new Rule(-23, new int[]{-13});
    rules[46] = new Rule(-25, new int[]{19,-29,20});
    rules[47] = new Rule(-29, new int[]{-4,-30,-31});
    rules[48] = new Rule(-29, new int[]{-4});
    rules[49] = new Rule(-31, new int[]{-32,-30,-31});
    rules[50] = new Rule(-31, new int[]{-4});
    rules[51] = new Rule(-30, new int[]{27,26,-23});
    rules[52] = new Rule(-30, new int[]{27,26,-33});
    rules[53] = new Rule(-33, new int[]{51,17,-8,18,-9,-10,52,51});
    rules[54] = new Rule(-32, new int[]{21});
    rules[55] = new Rule(-32, new int[]{13});
    rules[56] = new Rule(-24, new int[]{-34});
    rules[57] = new Rule(-24, new int[]{37,-24});
    rules[58] = new Rule(-24, new int[]{-23,-35,-23});
    rules[59] = new Rule(-27, new int[]{-22,17,-36,18});
    rules[60] = new Rule(-27, new int[]{31,17,-36,18});
    rules[61] = new Rule(-36, new int[]{-23,-36});
    rules[62] = new Rule(-36, new int[]{});
    rules[63] = new Rule(-26, new int[]{17,-23,18});
    rules[64] = new Rule(-26, new int[]{24,-23});
    rules[65] = new Rule(-28, new int[]{-22,23,-23});
    rules[66] = new Rule(-28, new int[]{-22,24,-23});
    rules[67] = new Rule(-28, new int[]{-22,7,-23});
    rules[68] = new Rule(-28, new int[]{-22,14,-23});
    rules[69] = new Rule(-22, new int[]{27});
    rules[70] = new Rule(-22, new int[]{27,15,-23,16});
    rules[71] = new Rule(-35, new int[]{8});
    rules[72] = new Rule(-35, new int[]{10});
    rules[73] = new Rule(-35, new int[]{9});
    rules[74] = new Rule(-35, new int[]{11});
    rules[75] = new Rule(-35, new int[]{22});
    rules[76] = new Rule(-35, new int[]{12});
    rules[77] = new Rule(-13, new int[]{-37});
    rules[78] = new Rule(-13, new int[]{-34});
    rules[79] = new Rule(-13, new int[]{-38});
    rules[80] = new Rule(-13, new int[]{-39});
    rules[81] = new Rule(-37, new int[]{36});
    rules[82] = new Rule(-34, new int[]{34});
    rules[83] = new Rule(-34, new int[]{35});
    rules[84] = new Rule(-38, new int[]{29});
    rules[85] = new Rule(-39, new int[]{28});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

#line 226 "SpecFiles\BrightScript.y"
 #line default
}
}
